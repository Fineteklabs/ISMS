Index: src/students/student_acad.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/student_acad.java	(revision )
+++ src/students/student_acad.java	(revision )
@@ -0,0 +1,103 @@
+package students;
+
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.IntegerProperty;
+import javafx.beans.property.StringProperty;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class student_acad {
+    StringProperty studentId;
+    StringProperty levelId;
+    StringProperty passStatus;
+    private DoubleProperty marks;
+    private DoubleProperty agp;
+    private IntegerProperty entryPoints;
+    private StringProperty termId;
+
+
+    public String getStudentId() {
+        return studentId.get();
+    }
+
+    public void setStudentId(String studentId) {
+        this.studentId.set(studentId);
+    }
+
+    public StringProperty studentIdProperty() {
+        return studentId;
+    }
+
+    public String getLevelId() {
+        return levelId.get();
+    }
+
+    public void setLevelId(String levelId) {
+        this.levelId.set(levelId);
+    }
+
+    public StringProperty levelIdProperty() {
+        return levelId;
+    }
+
+    public String getPassStatus() {
+        return passStatus.get();
+    }
+
+    public void setPassStatus(String passStatus) {
+        this.passStatus.set(passStatus);
+    }
+
+    public StringProperty passStatusProperty() {
+        return passStatus;
+    }
+
+    public double getMarks() {
+        return marks.get();
+    }
+
+    public void setMarks(double marks) {
+        this.marks.set(marks);
+    }
+
+    public DoubleProperty marksProperty() {
+        return marks;
+    }
+
+    public double getAgp() {
+        return agp.get();
+    }
+
+    public void setAgp(double agp) {
+        this.agp.set(agp);
+    }
+
+    public DoubleProperty agpProperty() {
+        return agp;
+    }
+
+    public int getEntryPoints() {
+        return entryPoints.get();
+    }
+
+    public void setEntryPoints(int entryPoints) {
+        this.entryPoints.set(entryPoints);
+    }
+
+    public IntegerProperty entryPointsProperty() {
+        return entryPoints;
+    }
+
+    public String getTermId() {
+        return termId.get();
+    }
+
+    public void setTermId(String termId) {
+        this.termId.set(termId);
+    }
+
+    public StringProperty termIdProperty() {
+        return termId;
+    }
+}
Index: src/exams/exams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/exams/exams.java	(revision )
+++ src/exams/exams.java	(revision )
@@ -0,0 +1,7 @@
+package exams;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class exams {
+}
Index: src/exams/exam_subjects.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/exams/exam_subjects.java	(revision )
+++ src/exams/exam_subjects.java	(revision )
@@ -0,0 +1,7 @@
+package exams;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class exam_subjects {
+}
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision )
+++ .idea/gradle.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="gradleHome" value="C:/Program Files (x86)/Gradle/gradle-1.0-rc-3" />
+  </component>
+</project>
+
Index: src/staff/staff.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/staff/staff.java	(revision )
+++ src/staff/staff.java	(revision )
@@ -0,0 +1,7 @@
+package staff;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class staff {
+}
Index: src/database/saveParent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/database/saveParent.java	(revision )
+++ src/database/saveParent.java	(revision )
@@ -0,0 +1,91 @@
+package database;
+
+import org.apache.commons.dbutils.DbUtils;
+import parents.parent;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+/**
+ * Created by FINETEKLABS on 12/17/2017.
+ */
+public class saveParent implements Runnable {
+    private static Lock lock = new ReentrantLock();
+    private String firstName;
+    private String lastName;
+    private String occupation;
+    private String Role;
+    private String nationalId;
+    private String phoneNumber;
+    private String emailAdress;
+    private String mobileNumber;
+    private String homeAdress;
+    private String postalAdress;
+    private String password;
+    private String activeStatus;
+    private String parentId;
+
+    public saveParent(parent mzazi) {
+        this.parentId = mzazi.getParentId();
+        this.firstName = mzazi.getFirstName();
+        this.lastName = mzazi.getLastName();
+        this.activeStatus = mzazi.getActiveStatus();
+
+        this.occupation = mzazi.getOccupation();
+        this.Role = mzazi.getRole();
+        this.phoneNumber = mzazi.getPhoneNumber();
+        this.emailAdress = mzazi.getEmailAdress();
+        this.mobileNumber = mzazi.getHomeAdress();
+        this.postalAdress = mzazi.getPostalAdress();
+        this.password = mzazi.getPassword();
+        this.homeAdress = mzazi.getHomeAdress();
+        this.nationalId = mzazi.getNationalIdentifiaction();
+
+
+    }
+
+    @Override
+    public void run() {
+        PreparedStatement pstmt = null;
+        Connection conn = null;
+        ResultSet rs = null;
+        try {
+            conn = currentDb.sqlite_connect();
+            lock.lock();
+            Thread.sleep(1000);
+            String sql = "INSERT INTO students (   studentId, firstName,middleName, lastName,  parentId,email,currentClassId,home, admissionDate, clearanceDate, dateOfBirth,activeState) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
+
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setString(1, parentId);
+            pstmt.setString(2, firstName);
+            pstmt.setString(3, lastName);
+            pstmt.setString(4, occupation);
+            pstmt.setString(5, parentId);
+            pstmt.setString(6, Role);
+            pstmt.setString(7, phoneNumber);
+            pstmt.setString(8, emailAdress);
+            pstmt.setString(9, mobileNumber);
+            pstmt.setString(10, postalAdress);
+            pstmt.setString(11, password);
+            pstmt.setString(12, activeStatus);
+            pstmt.setString(13, nationalId);
+
+
+            pstmt.executeUpdate();
+        } catch (SQLException e) {
+
+            System.out.println(e.getMessage());
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } finally {
+            DbUtils.closeQuietly(rs);
+            DbUtils.closeQuietly(pstmt);
+            DbUtils.closeQuietly(conn);
+            lock.unlock();
+        }
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision )
+++ .idea/misc.xml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="ProjectKey">
+    <option name="state" value="project://e79810c8-c5c8-43b1-b19c-90c1f4095425" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/students/addStudentsPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/addStudentsPresenter.java	(revision )
+++ src/students/addStudentsPresenter.java	(revision )
@@ -0,0 +1,107 @@
+package students;
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.controls.JFXDialog;
+import com.jfoenix.controls.JFXDialogLayout;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.layout.StackPane;
+import javafx.scene.layout.VBox;
+import javafx.scene.text.Text;
+import javafx.stage.Modality;
+import javafx.stage.Stage;
+import schools.schoolApp;
+
+import java.util.List;
+
+/**
+ * Created by FINETEKLABS on 12/22/2017.
+ */
+public class addStudentsPresenter {
+    private student momanyi;
+    //   private schoolPresenter myschoolView;
+
+    private student_view myView;
+
+
+    public addStudentsPresenter(student momanyi, student_view myView) {
+        this.momanyi = momanyi;
+        this.myView = myView;
+        attachEvents();
+    }
+
+    private void attachEvents() {
+        // myView.saveButton.setOnAction(e->saveData(myView.myschool)
+        //   );
+
+//          new school( Integer.parseInt(myView.schoolIdField.getText().trim()),
+//                  myView.schoolNameField.getText().trim().toUpperCase(),
+//                  myView.centerCodeField.getText().trim().toUpperCase(),
+//                  myView.academicYearField.getSelectionModel().getSelectedItem().toString(),
+//                  myView.locationField.getText().trim().toUpperCase(),
+//                  myView.addressField.getText().toUpperCase().trim(),
+//                  myView.mobileField.getText().trim().toUpperCase(),
+//                  myView.telephoneField.getText().trim().toUpperCase(),
+//                  myView.websiteField.getText().trim().toUpperCase(),
+//                  myView.emailField.getText().trim().toLowerCase(),
+//                  myView.currentTermField.getText().trim().toUpperCase(),
+//                  "ACTIVE")
+//        )
+        //   myView.closeButton.setOnAction(e -> myView.getScene().getWindow().hide());
+
+    }
+
+
+//    private void saveData(school myschool) {
+//        List<String> errorList = new ArrayList<>();
+//        myschool= myView.myschool;
+//        boolean  isVaild=  myView.isvalidEntry(errorList);
+//        if(!isVaild){
+//            this.showError(errorList);
+//        }else{
+//            boolean isSaved = myschool.save(errorList,myschool);
+//            if (!isSaved) {
+//                this.showError(errorList);
+//            }
+//        }
+
+
+    //   }
+
+
+    public void showError(List<String> errorList) {
+        String msg = "";
+        if (errorList.isEmpty()) {
+            msg = "  student saved";
+        } else {
+            for (String s : errorList) {
+                msg = msg + s + "\n";
+            }
+        }
+        Label msgLbl = new Label(msg);
+        Button okBtn = new Button("OK");
+        VBox root = new VBox(new StackPane(msgLbl), new StackPane(okBtn));
+        root.setSpacing(10);
+        StackPane stack = new StackPane();
+        Scene scene = new Scene(stack, 400, 120);
+
+        Stage stage = new Stage();
+        stage.initModality(Modality.APPLICATION_MODAL);
+        stage.initOwner(schoolApp.mainStage.getScene().getWindow());
+        JFXDialogLayout content = new JFXDialogLayout();
+        content.setHeading(new Text(" ERROR"));
+        content.setBody(msgLbl);
+
+        JFXDialog popupDiag = new JFXDialog(stack, content, JFXDialog.DialogTransition.CENTER);
+        JFXButton button = new JFXButton("okay");
+        button.setOnAction(e -> stage.close());
+        content.setActions(button);
+
+        stage.setScene(scene);
+        stage.show();
+        stage.resizableProperty().setValue(false);
+        popupDiag.show();
+    }
+
+}
Index: src/schools/drawer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/drawer.java	(revision )
+++ src/schools/drawer.java	(revision )
@@ -0,0 +1,7 @@
+package schools;
+
+/**
+ * Created by FINETEKLABS on 12/26/2017.
+ */
+public class drawer {
+}
Index: src/students/addStudent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/addStudent.java	(revision )
+++ src/students/addStudent.java	(revision )
@@ -0,0 +1,266 @@
+package students;
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.controls.JFXDatePicker;
+import com.jfoenix.controls.JFXTextField;
+import javafx.geometry.Insets;
+import javafx.geometry.Orientation;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.Label;
+import javafx.scene.control.Separator;
+import javafx.scene.control.SplitPane;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.GridPane;
+import javafx.scene.layout.VBox;
+import levels.level;
+
+/**
+ * Created by FINETEKLABS on 12/29/2017.
+ */
+public class addStudent extends GridPane {
+    //TextFields
+
+
+    public VBox border;
+    public BorderPane innerborder;
+    protected student momanyi = new student(" ", " ", " ", " ", " ", " ", " ", " ", null, null, null, " ");
+    //Labels
+    Label firstName = new Label("firstname:");
+    Label lastName = new Label("lastname");
+    Label middleName = new Label("middlename");
+    Label email = new Label("Email");
+    Label studentId = new Label("Student Id");
+    Label parentId = new Label("Parent Id");
+    Label activeState = new Label("Active Status");
+    Label currentClassId = new Label("Current Level");
+    Label admissionDate = new Label(" Admission Date");
+    Label clearanceDate = new Label(" Clearance Date");
+    Label home = new Label(" Home");
+    Label dateOfBirth = new Label(" Date of Birth");
+    //Buttons
+    JFXButton saveButton = new JFXButton("save");
+    JFXButton closeButton = new JFXButton("close");
+    JFXTextField studentIdField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField studentFirstNameField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField studentLastNameField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField studentMiddleName = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField homeField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField emailField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXDatePicker admissionDateField = new JFXDatePicker();
+    JFXDatePicker clearanceDateField = new JFXDatePicker();
+    JFXDatePicker dateOfBirthField = new JFXDatePicker();
+    ComboBox<parents.parent> parentIdField = new ComboBox<>();
+    ComboBox<level> getCurrentClassIdField = new ComboBox<>();
+    ComboBox<String> activeStateField = new ComboBox<>();
+    private BorderPane centraldata;
+    private VBox leftarea;
+
+    public addStudent(student momanyi) {
+        this.momanyi = momanyi;
+        GeneralInfo();
+        layoutField();
+        bindFieldsToModel();
+    }
+
+    public void layoutField() {
+        this.setHgap(10);
+        this.setVgap(10);
+        this.add(studentId, 1, 1);
+        this.add(firstName, 3, 1);
+        this.add(middleName, 1, 2);
+        this.add(lastName, 3, 2);
+        this.add(parentId, 1, 5);
+        this.add(email, 1, 6);
+        this.add(home, 1, 7);
+        this.add(admissionDate, 1, 8);
+        this.add(dateOfBirth, 1, 9);
+        this.add(clearanceDate, 3, 9);
+        this.add(currentClassId, 1, 11);
+
+
+        this.add(studentIdField, 2, 1);
+        this.add(studentFirstNameField, 4, 1);
+        this.add(studentMiddleName, 2, 2);
+
+        this.add(studentLastNameField, 4, 2);
+        this.add(parentIdField, 2, 5);
+        this.add(emailField, 2, 6);
+        this.add(homeField, 2, 7);
+        this.add(admissionDateField, 2, 8);
+        this.add(dateOfBirthField, 2, 9);
+        this.add(clearanceDateField, 4, 9);
+        this.add(getCurrentClassIdField, 2, 11);
+        this.add(saveButton, 5, 12);
+        this.add(closeButton, 6, 12);
+    }
+
+
+    public void bindFieldsToModel() {
+        studentIdField.textProperty().bind(momanyi.studentIdProperty());
+        studentMiddleName.textProperty().bindBidirectional(momanyi.middleNameProperty());
+        studentLastNameField.textProperty().bindBidirectional(momanyi.lastNameProperty());
+        studentFirstNameField.textProperty().bindBidirectional(momanyi.firstNameProperty());
+        emailField.textProperty().bindBidirectional(momanyi.emailProperty());
+        //  admissionDate.textProperty().bindBidirectional(momanyi.admissionDateProperty().toString());
+    }
+
+    public SplitPane GeneralInfo() {
+
+
+        // Create a horizontal separator
+        Separator separator1 = new Separator();
+// Change the orientation to vertical
+        separator1.setOrientation(Orientation.VERTICAL);
+// Create a vertical separator
+        Separator separator2 = new Separator(Orientation.VERTICAL);
+
+        SplitPane devidescreen = new SplitPane();
+
+
+        innerborder = new BorderPane();
+        leftarea = new VBox();
+        //   leftarea.getChildren().addAll(common.homeAccess.quickAccess());
+
+        innerborder.setCenter(leftarea);
+        centraldata = new BorderPane();
+//        centraldata.setTop(memberDataForm.mainmenu());
+        centraldata.setCenter(this);
+//        centraldata.setBottom(memberDataForm.Add());
+        centraldata.setPadding(new Insets(10, 10, 10, 10));
+
+        border = new VBox();
+
+        devidescreen.getItems().addAll(leftarea, centraldata);
+
+        devidescreen.setDividerPositions(0.15);
+        //
+        leftarea.maxWidthProperty().bind(devidescreen.widthProperty().multiply(0.20));
+        return devidescreen;
+    }
+}
Index: .idea/description.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/description.html	(revision )
+++ .idea/description.html	(revision )
@@ -0,0 +1,2 @@
+<html>Simple <b>JavaFX 2.0</b> application that includes simple .fxml file with attached controller and Main class to quick start. Artifact to build JavaFX application is provided.
+</html>
\ No newline at end of file
Index: src/sample/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/Main.java	(revision )
+++ src/sample/Main.java	(revision )
@@ -0,0 +1,22 @@
+package sample;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    public static void main(String[] args) {
+        launch(args);
+    }
+
+    @Override
+    public void start(Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
+        primaryStage.setTitle("Hello World");
+        primaryStage.setScene(new Scene(root, 300, 275));
+        primaryStage.show();
+    }
+}
Index: src/levels/level_view.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/levels/level_view.java	(revision )
+++ src/levels/level_view.java	(revision )
@@ -0,0 +1,9 @@
+package levels;
+
+import javafx.scene.control.TabPane;
+
+/**
+ * Created by FINETEKLABS on 1/12/2018.
+ */
+public class level_view extends TabPane {
+}
Index: src/sample/sample.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/sample.fxml	(revision )
+++ src/sample/sample.fxml	(revision )
@@ -0,0 +1,4 @@
+<?import javafx.scene.layout.GridPane?>
+<GridPane xmlns:fx="http://javafx.com/fxml"
+          fx:controller="sample.Controller" alignment="center" hgap="10" vgap="10">
+</GridPane>
\ No newline at end of file
Index: src/parents/parent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/parents/parent.java	(revision )
+++ src/parents/parent.java	(revision )
@@ -0,0 +1,220 @@
+package parents;
+
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+
+/**
+ * Created by FINETEKLABS on 12/4/2017.
+ */
+public class parent {
+
+    private StringProperty parentId = new SimpleStringProperty(this, "parentId", null);
+    ;
+    private StringProperty firstName = new SimpleStringProperty(this, "firstName", null);
+    ;;
+    private StringProperty lastName = new SimpleStringProperty(this, "lastName", null);
+    ;
+    private StringProperty occupation = new SimpleStringProperty(this, "occupation", null);
+    ;
+    private StringProperty Role = new SimpleStringProperty(this, "role", null);
+    ;
+    private StringProperty phoneNumber = new SimpleStringProperty(this, "phoneNumber", null);
+    ;
+    private StringProperty emailAdress = new SimpleStringProperty(this, "emailAddress", null);
+    ;
+    private StringProperty nationalIdentifiaction = new SimpleStringProperty(this, "nationalId", null);
+    ;
+    private StringProperty mobileNumber = new SimpleStringProperty(this, "mobileNumber", null);
+    ;
+    private StringProperty homeAdress = new SimpleStringProperty(this, "homeAddress", null);
+    ;
+    private StringProperty postalAdress = new SimpleStringProperty(this, "postalAddress", null);
+    ;
+    private StringProperty password = new SimpleStringProperty(this, "password", null);
+    ;
+    private StringProperty activeStatus = new SimpleStringProperty(this, "activeStatus", null);
+    ;
+
+    public parent(String parentId, String firstName, String lastName, String occupation, String Role, String phoneNumber,
+                  String emailAddress, String mobileNumber, String postalAddress, String password, String activeStatus, String nationalId) {
+        this.activeStatus.set(activeStatus);
+        this.parentId.set(parentId);
+        this.firstName.set(firstName);
+        this.lastName.set(lastName);
+        this.occupation.set(occupation);
+        this.emailAdress.set(emailAddress);
+        this.mobileNumber.set(mobileNumber);
+        this.postalAdress.set(postalAddress);
+        this.Role.set(Role);
+        this.phoneNumber.set(phoneNumber);
+        this.nationalIdentifiaction.set(nationalId);
+        this.password.set(password);
+    }
+
+    ;
+
+
+    public parent() {
+        this(" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ");
+    }
+
+    public String getFirstName() {
+        return firstName.get();
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName.set(firstName);
+    }
+
+    public StringProperty firstNameProperty() {
+        return firstName;
+    }
+
+    public String getLastName() {
+        return lastName.get();
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName.set(lastName);
+    }
+
+    public StringProperty lastNameProperty() {
+        return lastName;
+    }
+
+    public String getOccupation() {
+        return occupation.get();
+    }
+
+    public void setOccupation(String occupation) {
+        this.occupation.set(occupation);
+    }
+
+    public StringProperty occupationProperty() {
+        return occupation;
+    }
+
+    public String getRole() {
+        return Role.get();
+    }
+
+    public void setRole(String role) {
+        this.Role.set(role);
+    }
+
+    public StringProperty roleProperty() {
+        return Role;
+    }
+
+    public String getParentId() {
+        return parentId.get();
+    }
+
+    public void setParentId(String parentId) {
+        this.parentId.set(parentId);
+    }
+
+    public StringProperty parentIdProperty() {
+        return parentId;
+    }
+
+    public String getPhoneNumber() {
+        return phoneNumber.get();
+    }
+
+    public void setPhoneNumber(String phoneNumber) {
+        this.phoneNumber.set(phoneNumber);
+    }
+
+    public StringProperty phoneNumberProperty() {
+        return phoneNumber;
+    }
+
+    public String getEmailAdress() {
+        return emailAdress.get();
+    }
+
+    public void setEmailAdress(String emailAdress) {
+        this.emailAdress.set(emailAdress);
+    }
+
+    public StringProperty emailAdressProperty() {
+        return emailAdress;
+    }
+
+    public String getMobileNumber() {
+        return mobileNumber.get();
+    }
+
+    public void setMobileNumber(String mobileNumber) {
+        this.mobileNumber.set(mobileNumber);
+    }
+
+    public StringProperty mobileNumberProperty() {
+        return mobileNumber;
+    }
+
+    public String getHomeAdress() {
+        return homeAdress.get();
+    }
+
+    public void setHomeAdress(String homeAdress) {
+        this.homeAdress.set(homeAdress);
+    }
+
+    public StringProperty homeAdressProperty() {
+        return homeAdress;
+    }
+
+    public String getPostalAdress() {
+        return postalAdress.get();
+    }
+
+    public void setPostalAdress(String postalAdress) {
+        this.postalAdress.set(postalAdress);
+    }
+
+    public StringProperty postalAdressProperty() {
+        return postalAdress;
+    }
+
+    public String getPassword() {
+        return password.get();
+    }
+
+    public void setPassword(String password) {
+        this.password.set(password);
+    }
+
+    public StringProperty passwordProperty() {
+        return password;
+    }
+
+    public String getActiveStatus() {
+        return activeStatus.get();
+    }
+
+    public void setActiveStatus(String activeStatus) {
+        this.activeStatus.set(activeStatus);
+    }
+
+    public StringProperty activeStatusProperty() {
+        return activeStatus;
+    }
+
+    public String getNationalIdentifiaction() {
+        return nationalIdentifiaction.get();
+    }
+
+    public void setNationalIdentifiaction(String nationalIdentifiaction) {
+        this.nationalIdentifiaction.set(nationalIdentifiaction);
+    }
+
+    public StringProperty nationalIdentifiactionProperty() {
+        return nationalIdentifiaction;
+    }
+
+    public enum Roles {
+        GUARDIAN, PARENT, SPONSOR, SIBLING, OFFICIAL,
+    }
+}
Index: src/database/saveSchool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/database/saveSchool.java	(revision )
+++ src/database/saveSchool.java	(revision )
@@ -0,0 +1,93 @@
+package database;
+
+import org.apache.commons.dbutils.DbUtils;
+import schools.school;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+/**
+ * Created by FINETEKLABS on 12/17/2017.
+ */
+public class saveSchool implements Runnable {
+
+    private static Lock lock = new ReentrantLock();
+
+    private int schoolId;
+    private String schoolName;
+    private String centerCode;
+    private String schoolRegistration;
+    private String academicYear;
+    private String location;
+    private String address;
+    private String telephone;
+    private String mobile;
+    private String website;
+    private String email;
+    private String currentTerm;
+    private String activeState;
+
+
+    public saveSchool(school maseno) {
+        this.schoolId = maseno.getSchoolId();
+        this.schoolName = maseno.getSchoolName();
+        this.centerCode = maseno.getCenterCode();
+        this.schoolRegistration = maseno.getSchoolRegistration();
+        this.academicYear = maseno.getAcademicYear();
+        this.location = maseno.getLocation();
+        this.address = maseno.getAddress();
+        this.telephone = maseno.getAddress();
+        this.mobile = maseno.getMobile();
+        this.website = maseno.getWebsite();
+        this.email = maseno.getEmail();
+        this.currentTerm = maseno.getCurrentTerm();
+        this.activeState = maseno.getActiveState();
+    }
+
+
+    @Override
+    public void run() {
+        PreparedStatement pstmt = null;
+        Connection conn = null;
+        ResultSet rs = null;
+        try {
+            conn = currentDb.sqlite_connect();
+            lock.lock();
+            Thread.sleep(1000);
+            String sql = "INSERT INTO school (   schoolId,  schoolName, centerCode, schoolRegistration,  academicYear,location,address, telephone, mobile, website,email,currentTerm,activeState) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
+
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setInt(1, schoolId);
+            pstmt.setString(2, schoolName);
+            pstmt.setString(3, centerCode);
+            pstmt.setString(4, schoolRegistration);
+            pstmt.setString(5, academicYear);
+            pstmt.setString(6, location);
+            pstmt.setString(7, address);
+
+            pstmt.setString(8, telephone);
+            pstmt.setString(9, mobile);
+            pstmt.setString(10, website);
+            pstmt.setString(11, email);
+            pstmt.setString(12, currentTerm);
+            pstmt.setString(13, activeState);
+
+
+            pstmt.executeUpdate();
+        } catch (SQLException e) {
+
+            System.out.println(e.getMessage());
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } finally {
+            DbUtils.closeQuietly(rs);
+            DbUtils.closeQuietly(pstmt);
+            DbUtils.closeQuietly(conn);
+            lock.unlock();
+        }
+    }
+}
Index: src/levels/addLevel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/levels/addLevel.java	(revision )
+++ src/levels/addLevel.java	(revision )
@@ -0,0 +1,254 @@
+package levels;
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.controls.JFXTextField;
+import javafx.scene.control.Label;
+import javafx.scene.layout.GridPane;
+
+/**
+ * Created by FINETEKLABS on 1/12/2018.
+ */
+public class addLevel extends GridPane {
+    Label levelId = new Label(" level id");
+    Label levelName = new Label(" level name");
+    Label levelDescription = new Label("description");
+    Label supervisorId = new Label(" supervisor id");
+    Label currentTermId = new Label(" currentTerm");
+    Label currentFeeStructure = new Label("  Fee structure");
+    Label maxPopulation = new Label(" maximmum population");
+    Label levelFees = new Label(" fees");
+    Label levelPassMarks = new Label("pass marks");
+
+
+    JFXButton save = new JFXButton(" save");
+    JFXButton close = new JFXButton(" close");
+    JFXButton search = new JFXButton(" search");
+
+
+    JFXTextField levelIdField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+
+    JFXTextField levelNameField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField levelDescriptionField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+
+    JFXTextField supervisorIdField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField currentTermField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+    JFXTextField supervisorField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+
+    JFXTextField feeStructureField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+    JFXTextField passMarksField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+    JFXTextField maxPopulatioFieldn = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+
+    public GridPane layoutField() {
+
+        this.add(levelId, 1, 1);
+        this.add(levelName, 1, 2);
+        this.add(levelDescription, 1, 3);
+        this.add(currentTermId, 1, 4);
+        this.add(levelPassMarks, 1, 5);
+        this.add(levelFees, 1, 6);
+        this.add(supervisorId, 1, 7);
+
+        this.add(levelIdField, 2, 1);
+        this.add(levelNameField, 2, 2);
+        this.add(levelDescriptionField, 2, 3);
+
+
+        return this;
+    }
+}
Index: src/parents/parent_view.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/parents/parent_view.java	(revision )
+++ src/parents/parent_view.java	(revision )
@@ -0,0 +1,65 @@
+package parents;
+
+import javafx.geometry.Insets;
+import javafx.scene.control.SplitPane;
+import javafx.scene.control.Tab;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.VBox;
+
+/**
+ * Created by FINETEKLABS on 1/9/2018.
+ */
+public class parent_view extends Tab {
+    public VBox border;
+    public BorderPane innerborder;
+    public parent momanyi = new parent(" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ");
+    addParent addparents = new addParent(momanyi);
+    parentOptions editMenu = new parentOptions();
+    private BorderPane centraldata;
+    private VBox leftarea;
+    private BorderPane parentsCenter;
+    private HBox parentOPerations;
+    private VBox navigator;
+    private HBox menu;
+
+    public parent_view(parent momanyi, String title) {
+        this.momanyi = momanyi;
+//        designs();
+        init();
+        this.setText(title);
+
+//        bindFieldsToModel();
+
+        this.setContent(init());
+    }
+
+
+    public SplitPane init() {
+
+
+        SplitPane devidescreen = new SplitPane();
+
+
+        innerborder = new BorderPane();
+        leftarea = new VBox();
+
+        innerborder.setCenter(leftarea);
+        centraldata = new BorderPane();
+        centraldata.setCenter(addparents);
+        centraldata.setTop(editMenu);
+//        centraldata.setBottom(memberDataForm.Add());
+        centraldata.setPadding(new Insets(10, 10, 10, 10));
+
+        border = new VBox();
+
+        devidescreen.getItems().addAll(leftarea, centraldata);
+
+        devidescreen.setDividerPositions(0.15);
+        //
+        leftarea.maxWidthProperty().bind(devidescreen.widthProperty().multiply(0.20));
+        return devidescreen;
+    }
+}
+
+
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision )
+++ .idea/compiler.xml	(revision )
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <option name="DEFAULT_COMPILER" value="Javac" />
+    <resourceExtensions />
+    <wildcardResourcePatterns>
+      <entry name="!?*.java" />
+      <entry name="!?*.form" />
+      <entry name="!?*.class" />
+      <entry name="!?*.groovy" />
+      <entry name="!?*.scala" />
+      <entry name="!?*.flex" />
+      <entry name="!?*.kt" />
+      <entry name="!?*.clj" />
+    </wildcardResourcePatterns>
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="false">
+        <processorPath useClasspath="true" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
+
Index: src/schools/schoolSetttings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/schoolSetttings.java	(revision )
+++ src/schools/schoolSetttings.java	(revision )
@@ -0,0 +1,16 @@
+package schools;
+
+import javafx.beans.property.IntegerProperty;
+import javafx.beans.property.StringProperty;
+
+/**
+ * Created by FINETEKLABS on 12/3/2017.
+ */
+public class schoolSetttings {
+
+
+    private IntegerProperty schoolId;
+    private StringProperty databaseLocation;
+    private IntegerProperty schoolCategory;
+
+}
Index: src/students/student_activities.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/student_activities.java	(revision )
+++ src/students/student_activities.java	(revision )
@@ -0,0 +1,157 @@
+package students;
+
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.StringProperty;
+
+import java.time.LocalDate;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class student_activities {
+    DoubleProperty charges;
+    private StringProperty actvityId;
+    private StringProperty activityName;
+    private DoubleProperty paidIn;
+    private DoubleProperty balance;
+    private DoubleProperty overPayment;
+    private StringProperty ActiveStatus;
+    private ObjectProperty<LocalDate> starDate;
+    private ObjectProperty<LocalDate> endDate;
+    private StringProperty termId;
+    private StringProperty categoryId;
+
+
+    public String getActvityId() {
+        return actvityId.get();
+    }
+
+    public void setActvityId(String actvityId) {
+        this.actvityId.set(actvityId);
+    }
+
+    public StringProperty actvityIdProperty() {
+        return actvityId;
+    }
+
+    public String getActivityName() {
+        return activityName.get();
+    }
+
+    public void setActivityName(String activityName) {
+        this.activityName.set(activityName);
+    }
+
+    public StringProperty activityNameProperty() {
+        return activityName;
+    }
+
+    public double getCharges() {
+        return charges.get();
+    }
+
+    public void setCharges(double charges) {
+        this.charges.set(charges);
+    }
+
+    public DoubleProperty chargesProperty() {
+        return charges;
+    }
+
+    public double getPaidIn() {
+        return paidIn.get();
+    }
+
+    public void setPaidIn(double paidIn) {
+        this.paidIn.set(paidIn);
+    }
+
+    public DoubleProperty paidInProperty() {
+        return paidIn;
+    }
+
+    public double getBalance() {
+        return balance.get();
+    }
+
+    public void setBalance(double balance) {
+        this.balance.set(balance);
+    }
+
+    public DoubleProperty balanceProperty() {
+        return balance;
+    }
+
+    public double getOverPayment() {
+        return overPayment.get();
+    }
+
+    public void setOverPayment(double overPayment) {
+        this.overPayment.set(overPayment);
+    }
+
+    public DoubleProperty overPaymentProperty() {
+        return overPayment;
+    }
+
+    public String getActiveStatus() {
+        return ActiveStatus.get();
+    }
+
+    public void setActiveStatus(String activeStatus) {
+        this.ActiveStatus.set(activeStatus);
+    }
+
+    public StringProperty activeStatusProperty() {
+        return ActiveStatus;
+    }
+
+    public LocalDate getStarDate() {
+        return starDate.get();
+    }
+
+    public void setStarDate(LocalDate starDate) {
+        this.starDate.set(starDate);
+    }
+
+    public ObjectProperty<LocalDate> starDateProperty() {
+        return starDate;
+    }
+
+    public LocalDate getEndDate() {
+        return endDate.get();
+    }
+
+    public void setEndDate(LocalDate endDate) {
+        this.endDate.set(endDate);
+    }
+
+    public ObjectProperty<LocalDate> endDateProperty() {
+        return endDate;
+    }
+
+    public String getTermId() {
+        return termId.get();
+    }
+
+    public void setTermId(String termId) {
+        this.termId.set(termId);
+    }
+
+    public StringProperty termIdProperty() {
+        return termId;
+    }
+
+    public String getCategoryId() {
+        return categoryId.get();
+    }
+
+    public void setCategoryId(String categoryId) {
+        this.categoryId.set(categoryId);
+    }
+
+    public StringProperty categoryIdProperty() {
+        return categoryId;
+    }
+}
Index: src/staff/staff_rights.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/staff/staff_rights.java	(revision )
+++ src/staff/staff_rights.java	(revision )
@@ -0,0 +1,7 @@
+package staff;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class staff_rights {
+}
Index: src/students/student_fee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/student_fee.java	(revision )
+++ src/students/student_fee.java	(revision )
@@ -0,0 +1,31 @@
+package students;
+
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.StringProperty;
+
+import java.time.LocalDate;
+
+/**
+ * Created by FINETEKLABS on 12/4/2017.
+ */
+public class student_fee {
+    private StringProperty studentId;
+    ;
+    private DoubleProperty totalFees;
+    private DoubleProperty fowarded;
+    private DoubleProperty closingBalance;
+    private DoubleProperty refund;
+    private StringProperty termId;
+    private DoubleProperty activityFees;
+    private StringProperty feeStatus;
+    private StringProperty fines;
+    private ObjectProperty<LocalDate> currentDate;
+    private StringProperty staffId;// accountant or oversight officer
+
+    public enum feeStates {
+        WAIVERED, COMPLETED, FROZEN, INCOMPLETE, FOWARDED,
+    }
+
+
+}
Index: .idea/dataSources/47fd927b-eccc-4662-8e6b-3f88399d697a/storage.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dataSources/47fd927b-eccc-4662-8e6b-3f88399d697a/storage.xml	(revision )
+++ .idea/dataSources/47fd927b-eccc-4662-8e6b-3f88399d697a/storage.xml	(revision )
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<storage-settings staging-layout="plain" base-layout="schema-zip" language="SQLite"/>
\ No newline at end of file
Index: src/schools/school_view.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/school_view.java	(revision )
+++ src/schools/school_view.java	(revision )
@@ -0,0 +1,585 @@
+package schools;
+
+import com.jfoenix.controls.*;
+import com.jfoenix.svg.SVGGlyph;
+import com.jfoenix.transitions.hamburger.HamburgerSlideCloseTransition;
+import javafx.geometry.Insets;
+import javafx.geometry.Orientation;
+import javafx.geometry.Pos;
+import javafx.scene.control.*;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.GridPane;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.VBox;
+import javafx.scene.paint.Color;
+
+import java.util.List;
+
+/**
+ * Created by FINETEKLABS on 12/24/2017.
+ */
+public class school_view extends Tab {
+    public VBox border;
+    public BorderPane innerborder;
+    public school myschool = new school(0, "  ", "NONE ", "NONE  ", " NONE ", "  ", " NONE  ", " NONE ", " NONE ", "  ", " NONE", "  ACTIVE");
+    JFXTextField schoolNameField;
+    JFXTextField schoolIdField;
+    JFXTextField telephoneField;
+    JFXTextField mobileField;
+    JFXTextField locationField;
+    JFXTextField websiteField;
+    JFXTextField emailField;
+    JFXTextField currentTermField;
+    JFXTextField centerCodeField;
+    JFXToggleButton activeButton;
+    ComboBox academicYearField;
+    JFXTextField addressField;
+    JFXNodesList add;
+    Label schoolName = new Label("School Name:");
+    Label schoolId = new Label("School Number");
+    Label location = new Label("Location");
+    Label email = new Label("School email");
+    Label centerCode = new Label("Center Code");
+    Label address = new Label("School Address");
+    Label telephone = new Label("Telephone.No");
+    Label mobile = new Label("Mobile No");
+    Label website = new Label("Website");
+    Label currentTerm = new Label("Current Term");
+    Label academicYear = new Label(" Academic Year");
+    Label schoolCategory = new Label(" School Category");
+    Label activeStatus = new Label("Active Status");
+    //Buttons
+    JFXButton saveButton = new JFXButton("save");
+    JFXButton closeButton = new JFXButton("close");
+    private BorderPane centraldata;
+    private VBox leftarea;
+    private GridPane myGrid;
+
+    public school_view(school myschool, String title) {
+        this.myschool = myschool;
+        designs();
+        this.setText(title);
+        init();
+        bindFieldsToModel();
+    }
+
+    public void init() {
+
+
+        this.setContent(GeneralInfo());
+
+    }
+
+    public GridPane designs() {
+        this.schoolIdField = new JFXTextField() {
+            final int maxChars = 50;
+            final String restrictTo = "[0-9,A-Z ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+
+
+        this.schoolNameField = new JFXTextField() {
+            final int maxChars = 30;
+            final String restictTo = "[ 0-9,a-z A-Z ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restictTo));
+            }
+        };
+
+        this.schoolNameField.setPromptText(" maseno");
+        this.schoolNameField.setMinWidth(200);
+
+        locationField = new JFXTextField() {
+            final int maxChars = 30;
+            final String restictTo = "[ 0-9,a-z A-Z ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restictTo));
+            }
+        };
+
+        this.locationField.setPromptText(" e.g kilimani,nairobi kenya");
+        this.locationField.setMinWidth(200);
+
+        currentTermField = new JFXTextField() {
+            final int maxChars = 25;
+            final String restrictTo = "[ 0-9,a-z A-Z ]";
+            ;
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+        this.currentTermField.setPromptText("e.g TERM1-2017");
+
+
+        centerCodeField = new JFXTextField() {
+            final int maxChars = 20;
+            final String restrictTo = "[ 0-9,a-z A-Z ]";
+            ;
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+
+
+        centerCodeField.setPromptText("e.g 374000001");
+
+
+        telephoneField = new JFXTextField() {
+            final int maxChars = 40;
+            final String restrictTo = "[0-9,+, ,-]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+        this.telephoneField.setPromptText("+254 720 543 543");
+        emailField = new JFXTextField() {
+            final int maxChars = 12;
+            final String restrictTo = "[0-9,A-Z ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+        this.emailField.setPromptText("example@example.com");
+        mobileField = new JFXTextField() {
+            final int maxChars = 30;
+            final String restrictTo = "[0-9,A-Z,. ,  ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+        this.mobileField.setPromptText("020 5673455");
+
+
+        this.websiteField = new JFXTextField() {
+            final int maxChars = 20;
+            final String restrictTo = "[ .,0-9,a-z A-Z ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+        this.websiteField.setPromptText(" www.example.com");
+
+
+        this.addressField = new JFXTextField() {
+            final int maxChars = 20;
+            final String restrictTo = "[-.,0-9,a-z A-Z ]";
+
+            @Override
+            public void replaceText(int start, int end, String text) {
+                if (matchTest(text)) {
+                    super.replaceText(start, end, text);
+                }
+            }
+
+            @Override
+            public void replaceSelection(String text) {
+                if (matchTest(text)) {
+                    super.replaceSelection(text);
+                }
+            }
+
+            private boolean matchTest(String text) {
+                return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+            }
+        };
+        this.addressField.setPromptText(" 9638-0100,NAIROBI");
+
+
+        activeButton = new JFXToggleButton();
+        activeButton.setTooltip(new Tooltip("set active or inactive"));
+        activeButton.setToggleColor(Color.DARKGREEN);
+        activeButton.setUnToggleColor(Color.SILVER);
+
+        academicYearField = new ComboBox();
+        academicYearField.setTooltip(new Tooltip(" current year of study"));
+        //academicYearField.setPromptText("academic year");
+        academicYearField.getItems().addAll(" 2018-2019", "2017-2018");
+        academicYearField.setMinWidth(200);
+        JFXButton ssbutton1 = new JFXButton("ADD");
+//        add.addAnimatedNode(ssbutton1);
+
+
+        return layoutField();
+
+    }
+
+    private GridPane layoutField() {
+        myGrid = new GridPane();
+        myGrid.setHgap(10);
+        myGrid.setVgap(10);
+
+        myGrid.add(schoolId, 1, 1);
+        myGrid.add(schoolName, 1, 2);
+        myGrid.add(currentTerm, 1, 3);
+
+        myGrid.add(location, 1, 4);
+        myGrid.add(telephone, 1, 5);
+        myGrid.add(mobile, 1, 6);
+        myGrid.add(centerCode, 1, 7);
+        myGrid.add(website, 1, 8);
+
+
+        myGrid.add(email, 3, 1);
+        myGrid.add(activeStatus, 3, 2);
+        myGrid.add(academicYear, 3, 3);
+        myGrid.add(address, 3, 4);
+        myGrid.add(schoolIdField, 2, 1);
+        myGrid.add(schoolNameField, 2, 2);
+        myGrid.add(currentTermField, 2, 3);
+        myGrid.add(locationField, 2, 4);
+        myGrid.add(telephoneField, 2, 5);
+        myGrid.add(mobileField, 2, 6);
+        myGrid.add(centerCodeField, 2, 7);
+        myGrid.add(websiteField, 2, 8);
+        myGrid.add(emailField, 4, 1);
+        myGrid.add(activeButton, 4, 2);
+        myGrid.add(academicYearField, 4, 3);
+        myGrid.add(addressField, 4, 4);
+        // myGrid.add(add,5,3);
+
+
+        HBox buttonBox = new HBox(saveButton, closeButton);
+        saveButton.setMaxWidth(Double.MAX_VALUE);
+        closeButton.setMaxWidth(Double.MAX_VALUE);
+
+
+        myGrid.add(buttonBox, 4, 6, 5, 5);
+        return myGrid;
+
+    }
+
+    public void bindFieldsToModel() {
+        schoolIdField.textProperty().bind(myschool.schoolIdProperty().asString());
+        schoolNameField.textProperty().bindBidirectional(myschool.schoolNameProperty());
+        locationField.textProperty().bindBidirectional(myschool.locationProperty());
+    }
+
+
+    public SplitPane GeneralInfo() {
+        JFXScrollPane pane = new JFXScrollPane();
+
+        pane.setContent(layoutField());
+
+        JFXHamburger button = new JFXHamburger();
+        HamburgerSlideCloseTransition burgerTask = new HamburgerSlideCloseTransition(button);
+        burgerTask.setRate(-1);
+        button.addEventHandler(MouseEvent.MOUSE_PRESSED, (e) -> {
+            burgerTask.setRate(burgerTask.getRate() * -1);
+            burgerTask.play();
+        });
+        button.setAlignment(Pos.TOP_LEFT);
+        button.setPadding(new Insets(10, 0, 0, 10));
+        SVGGlyph arrow = new SVGGlyph(0, "FULLSCREEN", "M402.746 877.254l-320-320c-24.994-24.992-24.994-65.516 0-90.51l320-320c24.994-24.992 65.516-24.992 90.51 0 24.994 24.994 24.994 65.516 0 90.51l-210.746 210.746h613.49c35.346 0 64 28.654 64 64s-28.654 64-64 64h-613.49l210.746 210.746c12.496 12.496 18.744 28.876 18.744 45.254s-6.248 32.758-18.744 45.254c-24.994 24.994-65.516 24.994-90.51 0z", Color.WHITE);
+        // arrow.setSize(20, 16);
+//        button.getAnimation()
+//        button.setRipplerFill(Color.WHITE);
+//
+//        button.setOnAction(e->{
+//            //companyPane.tabs.getSelectionModel().selectPrevious();
+//        });
+        pane.getTopBar().getChildren().add(button);
+        pane.getTopBar().setStyle("-fx-background-color: WHITE");
+        Label title = new Label("SCHOOL INFORMATION");
+        pane.getMainHeader().getChildren().add(title);
+        title.setStyle("-fx-text-fill:WHITE; -fx-font-size: 40;");
+        JFXScrollPane.smoothScrolling((ScrollPane) pane.getChildren().get(0));
+        pane.getTopBar().setMaxHeight(50);
+        //pane.getCondensedHeader().getChildren().add(title)
+        pane.getBottomBar().setMaxHeight(50);
+        pane.setAlignment(title, Pos.CENTER_LEFT);
+        pane.setAlignment(button, Pos.CENTER_LEFT);
+
+        //  myCompanySettings.chooser.getStyleClass().add("button-raised");
+
+
+        // Create a horizontal separator
+        Separator separator1 = new Separator();
+// Change the orientation to vertical
+        separator1.setOrientation(Orientation.VERTICAL);
+// Create a vertical separator
+        Separator separator2 = new Separator(Orientation.VERTICAL);
+
+        SplitPane devidescreen = new SplitPane();
+
+
+        innerborder = new BorderPane();
+        leftarea = new VBox();
+        //   leftarea.getChildren().addAll(common.homeAccess.quickAccess());
+
+        innerborder.setCenter(leftarea);
+        centraldata = new BorderPane();
+//        centraldata.setTop(memberDataForm.mainmenu());
+        centraldata.setCenter(pane);
+//        centraldata.setBottom(memberDataForm.Add());
+        centraldata.setPadding(new Insets(10, 10, 10, 10));
+
+        border = new VBox();
+        // border.getChildren().addAll(homeAccess.quickAccess());
+//        VBox headers = null;
+//        headers = new VBox();
+//        headers.getChildren().addAll(mainmenu(),top());
+//
+//        border.setTop(headers);
+        //  border.setCenter();
+        devidescreen.getItems().addAll(leftarea, centraldata);
+        //border.setPadding( new Insets(10,10,10,10));
+//        // border.setRight(itemcounter());
+        devidescreen.setDividerPositions(0.15);
+        //
+        leftarea.maxWidthProperty().bind(devidescreen.widthProperty().multiply(0.20));
+        return devidescreen;
+    }
+
+    public boolean isvalidEntry(List<String> errorList) {
+
+        boolean isValid = true;
+        String sid = schoolIdField.getText();
+        if (sid == null || sid.trim().length() > 2) {
+            errorList.add("school id is already taken");
+            isValid = false;
+        }
+        String name = schoolNameField.getText();
+        if (name == null || name.trim().length() <= 5) {
+            errorList.add("school name must contain more than 5 characters");
+            isValid = false;
+        }
+        String stelephone = telephoneField.getText();
+        if (stelephone == null || stelephone.trim().length() <= 8) {
+            errorList.add("telephone must be atleast 5 numbers");
+            isValid = true;
+            ;
+        }
+        String location = locationField.getText();
+        if (location == null || location.trim().length() <= 5) {
+            errorList.add("location field must be atleast 4 numbers");
+            isValid = true;
+            ;
+        }
+        String mobile = mobileField.getText();
+        if (mobile == null || mobile.trim().length() <= 5) {
+            errorList.add("mobile must be atleast 4 numbers");
+            isValid = true;
+        }
+
+        String centercode = centerCodeField.getText();
+        if (centercode == null || centercode.trim().length() <= 5) {
+            errorList.add("center code must be atleast 4 numbers");
+            isValid = true;
+            ;
+        }
+
+
+        String academicyear = academicYearField.getSelectionModel().getSelectedItem().toString();
+        if (academicyear == null || academicyear.trim().length() <= 4) {
+            errorList.add("academic year must be atleast 4 numbers");
+            isValid = false;
+            ;
+        }
+
+
+        String email = emailField.getText();
+        if (email == null || email.trim().length() <= 10) {
+            errorList.add("email field must be filled correctly");
+            isValid = true;
+        }
+
+        String website = websiteField.getText();
+        if (website == null || website.trim().length() <= 4) {
+            errorList.add("website  code must be atleast 4 numbers");
+            isValid = false;
+        }
+
+        String currentTerm = currentTermField.getText();
+        if (currentTerm == null || currentTerm.trim().length() <= 4) {
+            errorList.add("term  must be atleast 4 characters");
+            isValid = false;
+        }
+
+        return isValid;
+
+    }
+
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
Index: SIMS.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SIMS.iml	(revision )
+++ SIMS.iml	(revision )
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="myLibraries" level="application" />
+  </component>
+</module>
\ No newline at end of file
Index: src/terms/addTerm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/terms/addTerm.java	(revision )
+++ src/terms/addTerm.java	(revision )
@@ -0,0 +1,7 @@
+package terms;
+
+/**
+ * Created by FINETEKLABS on 1/6/2018.
+ */
+public class addTerm {
+}
Index: src/schools/schoolPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/schoolPresenter.java	(revision )
+++ src/schools/schoolPresenter.java	(revision )
@@ -0,0 +1,107 @@
+package schools;
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.controls.JFXDialog;
+import com.jfoenix.controls.JFXDialogLayout;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.layout.StackPane;
+import javafx.scene.layout.VBox;
+import javafx.scene.text.Text;
+import javafx.stage.Modality;
+import javafx.stage.Stage;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by FINETEKLABS on 12/22/2017.
+ */
+public class schoolPresenter {
+    private school myschool;
+    private schoolPresenter myschoolView;
+
+    private school_view myView;
+
+
+    public schoolPresenter(school myschool, school_view myView) {
+        this.myschool = myschool;
+        this.myView = myView;
+        attachEvents();
+    }
+
+    private void attachEvents() {
+        myView.saveButton.setOnAction(e -> saveData(myView.myschool)
+        );
+
+//          new school( Integer.parseInt(myView.schoolIdField.getText().trim()),
+//                  myView.schoolNameField.getText().trim().toUpperCase(),
+//                  myView.centerCodeField.getText().trim().toUpperCase(),
+//                  myView.academicYearField.getSelectionModel().getSelectedItem().toString(),
+//                  myView.locationField.getText().trim().toUpperCase(),
+//                  myView.addressField.getText().toUpperCase().trim(),
+//                  myView.mobileField.getText().trim().toUpperCase(),
+//                  myView.telephoneField.getText().trim().toUpperCase(),
+//                  myView.websiteField.getText().trim().toUpperCase(),
+//                  myView.emailField.getText().trim().toLowerCase(),
+//                  myView.currentTermField.getText().trim().toUpperCase(),
+//                  "ACTIVE")
+//        )
+        //   myView.closeButton.setOnAction(e -> myView.getScene().getWindow().hide());
+
+    }
+
+
+    private void saveData(school myschool) {
+        List<String> errorList = new ArrayList<>();
+        myschool = myView.myschool;
+        boolean isVaild = myView.isvalidEntry(errorList);
+        if (!isVaild) {
+            this.showError(errorList);
+        } else {
+            boolean isSaved = myschool.save(errorList, myschool);
+            if (!isSaved) {
+                this.showError(errorList);
+            }
+        }
+
+
+    }
+
+
+    public void showError(List<String> errorList) {
+        String msg = "";
+        if (errorList.isEmpty()) {
+            msg = "No message to display.";
+        } else {
+            for (String s : errorList) {
+                msg = msg + s + "\n";
+            }
+        }
+        Label msgLbl = new Label(msg);
+        Button okBtn = new Button("OK");
+        VBox root = new VBox(new StackPane(msgLbl), new StackPane(okBtn));
+        root.setSpacing(10);
+        StackPane stack = new StackPane();
+        Scene scene = new Scene(stack, 400, 120);
+
+        Stage stage = new Stage();
+        stage.initModality(Modality.APPLICATION_MODAL);
+        stage.initOwner(schoolApp.mainStage.getScene().getWindow());
+        JFXDialogLayout content = new JFXDialogLayout();
+        content.setHeading(new Text(" ERROR"));
+        content.setBody(msgLbl);
+
+        JFXDialog popupDiag = new JFXDialog(stack, content, JFXDialog.DialogTransition.CENTER);
+        JFXButton button = new JFXButton("okay");
+        button.setOnAction(e -> stage.close());
+        content.setActions(button);
+
+        stage.setScene(scene);
+        stage.show();
+        stage.resizableProperty().setValue(false);
+        popupDiag.show();
+    }
+
+}
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(revision )
+++ .idea/encodings.xml	(revision )
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding" useUTFGuessing="true" native2AsciiForPropertiesFiles="false" />
+</project>
+
Index: src/students/students_list.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/students_list.java	(revision )
+++ src/students/students_list.java	(revision )
@@ -0,0 +1,59 @@
+package students;
+
+import javafx.beans.property.ReadOnlyStringWrapper;
+import javafx.scene.control.TableColumn;
+import javafx.scene.control.TableView;
+import javafx.scene.control.cell.PropertyValueFactory;
+
+/**
+ * Created by FINETEKLABS on 12/30/2017.
+ */
+public class students_list extends TableView {
+
+    // Return Student  Name
+    public TableColumn<student, String> studentNameColumn() {
+        TableColumn<student, String> studentNameColumn = new TableColumn<>("Full Name");
+        studentNameColumn.setCellValueFactory(cellData -> {
+            student ms = cellData.getValue();
+            String firstname = ms.getFirstName();
+            String lastname = ms.getLastName();
+            String middleName = ms.getMiddleName();
+
+            String name = firstname + " " + middleName + " " + lastname;
+            return new ReadOnlyStringWrapper(name);
+        });
+        return studentNameColumn;
+    }
+
+    // return student Identification
+    public TableColumn<student, String> studentIdColumn() {
+        TableColumn<student, String> studentIdColumn = new TableColumn<>("STUDENT ID ");
+        studentIdColumn.setCellValueFactory(new PropertyValueFactory<student, String>("studentId"));
+        return studentIdColumn;
+    }
+
+
+    //Email Address
+    public TableColumn<student, String> emailAdressColumn() {
+        TableColumn<student, String> emailAdressColumn = new TableColumn<>("EMAIL ADRESS");
+        emailAdressColumn.setCellValueFactory(new PropertyValueFactory<>("email"));
+        return emailAdressColumn;
+    }
+
+
+    // return current Class
+    public TableColumn<student, String> currentClassColumn() {
+        TableColumn<student, String> currentClassId = new TableColumn<>("CURRENT CLASS  ");
+        currentClassId.setCellValueFactory(new PropertyValueFactory<student, String>("minimmumIncome"));
+        return currentClassId;
+    }
+
+    // return active Status
+    public TableColumn<student, String> activeStateColumn() {
+        TableColumn<student, String> activeStateColumn = new TableColumn<>("ACTIVE STATUS");
+        activeStateColumn.setCellValueFactory(new PropertyValueFactory<student, String>("activeState"));
+        return activeStateColumn;
+    }
+
+
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/uiDesigner.xml	(revision )
+++ .idea/uiDesigner.xml	(revision )
@@ -0,0 +1,125 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
+
Index: src/students/student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/student.java	(revision )
+++ src/students/student.java	(revision )
@@ -0,0 +1,303 @@
+package students;
+
+import database.saveStudent;
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.SimpleObjectProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+
+import java.time.LocalDate;
+import java.time.temporal.ChronoUnit;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/**
+ * Created by FINETEKLABS on 11/29/2017.
+ */
+public class student {
+    private static ExecutorService executor;
+    private final StringProperty firstName = new SimpleStringProperty(this, "firstName", null);
+    ;
+    private final StringProperty lastName = new SimpleStringProperty(this, "lastName", null);
+    private final StringProperty middleName = new SimpleStringProperty(this, "middleName", null);
+    private final StringProperty studentId = new SimpleStringProperty(this, "studentId", null);
+    private final StringProperty parentId = new SimpleStringProperty(this, "parentId", null);
+    private final StringProperty home = new SimpleStringProperty(this, "home", null);
+    private final ObjectProperty<LocalDate> dateOfBirth = new SimpleObjectProperty<>(this, "dateOfBirth", null);
+    private final StringProperty email = new SimpleStringProperty(this, "email", null);
+    private final StringProperty activeState = new SimpleStringProperty(this, "activeState", null);
+    private final StringProperty currentClassId = new SimpleStringProperty(this, "currentClassId", null);
+    private final StringProperty currentStream = new SimpleStringProperty(this, "currentStream,null");
+    private final ObjectProperty<LocalDate> admissionDate = new SimpleObjectProperty<>(this, "admissionDate", null);
+    private final ObjectProperty<LocalDate> clearanceDate = new SimpleObjectProperty<>(this, "clearanceDate", null);
+
+    public student(String studentId, String firstName, String middleName, String lastName, String parentId, String email, String currentClassId, String home, LocalDate admissionDate, LocalDate clearanceDate, LocalDate dateOfBirth, String activeState) {
+        this.studentId.set(studentId);
+        this.firstName.set(firstName);
+        this.middleName.set(middleName);
+        this.lastName.set(lastName);
+        this.parentId.set(parentId);
+        this.email.set(email);
+        this.currentClassId.set(currentClassId);
+        this.activeState.set(activeState);
+        this.home.set(home);
+        this.clearanceDate.set(clearanceDate);
+        this.dateOfBirth.set(dateOfBirth);
+        this.admissionDate.set(admissionDate);
+    }
+
+    public student() {
+        this(null, null, null, null, null, null, null, null, null, null, null, null);
+    }
+
+    public String getFirstName() {
+        return firstName.get();
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName.set(firstName);
+    }
+
+    public StringProperty firstNameProperty() {
+        return firstName;
+    }
+
+    public String getLastName() {
+        return lastName.get();
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName.set(lastName);
+    }
+
+    public StringProperty lastNameProperty() {
+        return lastName;
+    }
+
+    public String getMiddleName() {
+        return middleName.get();
+    }
+
+    public void setMiddleName(String middleName) {
+        this.middleName.set(middleName);
+    }
+
+    public StringProperty middleNameProperty() {
+        return middleName;
+    }
+
+    public String getHome() {
+        return home.get();
+    }
+
+    public void setHome(String home) {
+        this.home.set(home);
+    }
+
+    public StringProperty homeProperty() {
+        return home;
+    }
+
+    public LocalDate getDateOfBirth() {
+        return dateOfBirth.get();
+    }
+
+    public void setDateOfBirth(LocalDate dateOfBirth) {
+        this.dateOfBirth.set(dateOfBirth);
+    }
+
+    public ObjectProperty<LocalDate> dateOfBirthProperty() {
+        return dateOfBirth;
+    }
+
+    public String getEmail() {
+        return email.get();
+    }
+
+    public void setEmail(String email) {
+        this.email.set(email);
+    }
+
+    public StringProperty emailProperty() {
+        return email;
+    }
+
+    public String getStudentId() {
+        return studentId.get();
+    }
+
+    public void setStudentId(String studentId) {
+        this.studentId.set(studentId);
+    }
+
+    public StringProperty studentIdProperty() {
+        return studentId;
+    }
+
+    public String getParentId() {
+        return parentId.get();
+    }
+
+    public void setParentId(String parentId) {
+        this.parentId.set(parentId);
+    }
+
+    public StringProperty parentIdProperty() {
+        return parentId;
+    }
+
+    public String getActiveState() {
+        return activeState.get();
+    }
+
+    public void setActiveState(String activeState) {
+        this.activeState.set(activeState);
+    }
+
+    public StringProperty activeStateProperty() {
+        return activeState;
+    }
+
+    public LocalDate getAdmissionDate() {
+        return admissionDate.get();
+    }
+
+    public void setAdmissionDate(LocalDate admissionDate) {
+        this.admissionDate.set(admissionDate);
+    }
+
+    public ObjectProperty<LocalDate> admissionDateProperty() {
+        return admissionDate;
+    }
+
+    public LocalDate getClearanceDate() {
+        return clearanceDate.get();
+    }
+
+    public void setClearanceDate(LocalDate clearanceDate) {
+        this.clearanceDate.set(clearanceDate);
+    }
+
+    public ObjectProperty<LocalDate> clearanceDateProperty() {
+        return clearanceDate;
+    }
+
+    public String getCurrentClassId() {
+        return currentClassId.get();
+    }
+
+    public void setCurrentClassId(String currentClassId) {
+        this.currentClassId.set(currentClassId);
+    }
+
+    public StringProperty currentClassIdProperty() {
+        return currentClassId;
+    }
+
+    public String getCurrentStream() {
+        return currentStream.get();
+    }
+
+    public void setCurrentStream(String currentStream) {
+        this.currentStream.set(currentStream);
+    }
+
+    public StringProperty currentStreamProperty() {
+        return currentStream;
+    }
+
+    public boolean isValidBirthDate(LocalDate bdate) {
+        return isValidBirthDate(bdate, new ArrayList<>());
+    }
+
+    /* Domain specific business rules */
+    public boolean isValidBirthDate(LocalDate bdate, List<String> errorList) {
+        if (bdate == null) {
+            return true;
+        }
+// Birth date cannot be in the future
+        if (bdate.isAfter(LocalDate.now())) {
+            errorList.add("Birth date must not be in future.");
+            return false;
+        }
+        return true;
+    }
+
+    public AgeCategory getAgeCategory() {
+        if (dateOfBirth.get() == null) {
+            return AgeCategory.UNKNOWN;
+        }
+        long years = ChronoUnit.YEARS.between(dateOfBirth.get(), LocalDate.now());
+        if (years >= 0 && years < 2) {
+            return AgeCategory.BABY;
+        } else if (years >= 2 && years < 13) {
+            return AgeCategory.CHILD;
+        } else if (years >= 13 && years <= 19) {
+            return AgeCategory.TEEN;
+        } else if (years > 19 && years <= 50) {
+            return AgeCategory.ADULT;
+        } else if (years > 50) {
+            return AgeCategory.SENIOR;
+        } else {
+            return AgeCategory.UNKNOWN;
+        }
+    }
+
+    public Boolean isValidStudent(student momanyi, List<String> errorList) {
+        boolean isValid = true;
+
+        String fullName = momanyi.getFirstName() + momanyi.getMiddleName() + momanyi.getLastName();
+        if (fullName == null || fullName.trim().length() <= 5) {
+            errorList.add(" student  name must contain atleast five characters");
+            isValid = false;
+        }
+        String sid = momanyi.getStudentId();
+
+        if (sid == null || sid.trim().length() < 3) {
+            errorList.add(" you've not assigned a valid student id");
+
+        }
+
+        String currentClass = momanyi.getCurrentClassId();
+        if (currentClass == null) {
+            errorList.add("please assign the student a current class");
+            isValid = false;
+        }
+        LocalDate clearanceDate = momanyi.getClearanceDate();
+        if (clearanceDate == null || clearanceDate.isBefore(LocalDate.now())) {
+            errorList.add(" please check the expected clearance date of the student");
+
+        }
+
+        isValid = false;
+
+
+        return isValid;
+    }
+
+    public boolean isValidStudent(List<String> errorList) {
+        return isValidStudent(this, errorList);
+    }
+
+    public boolean save(List<String> errorList, student momanyi) {
+        boolean isSaved = false;
+
+        if (isValidStudent(errorList)) {
+            executor = Executors.newFixedThreadPool(2);
+            executor.execute(new saveStudent(momanyi));
+            isSaved = true;
+        }
+
+        //save to db
+        //save to db
+        return isSaved;
+
+    }
+
+    public enum AgeCategory {
+        BABY, CHILD, TEEN, ADULT, SENIOR, UNKNOWN
+    }
+
+}
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dataSources.xml	(revision )
+++ .idea/dataSources.xml	(revision )
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
+    <data-source source="LOCAL" name="sims" uuid="47fd927b-eccc-4662-8e6b-3f88399d697a">
+      <driver-ref>sqlite.xerial</driver-ref>
+      <synchronize>true</synchronize>
+      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>
+      <jdbc-url>jdbc:sqlite:D:\IdeaProjects\SIMS\src\resources\sims.sqlite</jdbc-url>
+    </data-source>
+  </component>
+</project>
\ No newline at end of file
Index: src/students/student_subjects.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/student_subjects.java	(revision )
+++ src/students/student_subjects.java	(revision )
@@ -0,0 +1,7 @@
+package students;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class student_subjects {
+}
Index: src/schools/schoolApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/schoolApp.java	(revision )
+++ src/schools/schoolApp.java	(revision )
@@ -0,0 +1,156 @@
+package schools;
+
+/**
+ * Created by FINETEKLABS on 12/24/2017.
+ */
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.svg.SVGGlyph;
+import javafx.application.Application;
+import javafx.application.Platform;
+import javafx.geometry.Insets;
+import javafx.scene.Scene;
+import javafx.scene.control.Menu;
+import javafx.scene.control.MenuBar;
+import javafx.scene.control.MenuItem;
+import javafx.scene.control.TabPane;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.HBox;
+import javafx.scene.paint.Color;
+import javafx.stage.Stage;
+import org.apache.log4j.BasicConfigurator;
+import parents.parent;
+import parents.parent_view;
+import students.student;
+import students.student_view;
+
+/**
+ * Created by FINETEKLABS on 11/23/2017.
+ */
+
+
+/**
+ * Created by FINETECHLABS on 16/08/2016.
+ */
+
+
+public class schoolApp extends Application {
+    public static Stage mainStage;
+    public static Scene scene;
+    public static MenuItem login;
+    public static MenuItem logout;
+    public static MenuItem exit;
+    public static JFXButton button;
+    //private  schoolDetailsTab  schoolDetails;
+    private static Menu users;
+    private static Menu help;
+    private static Menu view;
+    private static Menu about;
+    //  public static
+    public TabPane tabs = new TabPane();
+
+    public static void main(String args[]) {
+        launch(args);
+    }
+
+    public static MenuBar TopMenu() {
+        HBox titleBox = new HBox();
+
+        login = new MenuItem("LOGIN");
+        login.setOnAction(e -> {
+            //Users.login();
+        });
+        logout = new MenuItem("LOGOUT");
+        logout.setOnAction(e -> {
+            //Users.login();
+            login.setDisable(false);
+            logout.setDisable(true);
+        });
+        logout.setDisable(true);
+        exit = new MenuItem("EXIT");
+        exit.setOnAction(e -> {
+            Platform.exit();
+        });
+        titleBox.setStyle("-fx-border-color: #004d40;-fx-border-insets:5;" +
+                "-fx-border-style:solid;" +
+                "-fx-border-width: 2");
+        titleBox.setPadding(new Insets(10, 10, 10, 10));
+        MenuBar loginBar = new MenuBar();
+
+        users = new Menu("USERS");
+        users.getItems().addAll(login, logout, exit);
+
+        about = new Menu("ABOUT");
+        view = new Menu("VIEW");
+        loginBar.getMenus().addAll(users, view, about);
+        titleBox.getChildren().addAll(loginBar);
+        return loginBar;
+    }
+
+    @Override
+    public void start(Stage stage) throws Exception {
+        setUserAgentStylesheet(STYLESHEET_MODENA);
+        school myschool = new school();
+        student momanyi = new student();
+        parent myparent = new parent();
+        student_view students = new student_view(momanyi, "STUDENTS CENTER");
+        school_view views = new school_view(myschool, "SCHOOL INFORMATION");
+        parent_view parents = new parent_view(myparent, "PARENT CENTER");
+        views.closableProperty().set(false);
+
+        tabs.getTabs().addAll(views, students, parents);
+        BorderPane border = new BorderPane();
+        border.setCenter(tabs);
+
+        border.setTop(TopMenu());
+        scene = new Scene(border, 700, 600);
+
+
+        //   schoolPresenter present = new schoolPresenter(myschool,views);
+        BasicConfigurator.configure();
+//the stock tab
+
+
+        mainStage = new Stage();
+        mainStage.minWidthProperty().bind(scene.heightProperty().multiply(1.5));
+        mainStage.minHeightProperty().bind(scene.widthProperty().divide(1.5));
+        mainStage.setAlwaysOnTop(true);
+//        stage.initModality(Modality.APPLICATION_MODAL);
+        mainStage.resizableProperty().setValue(false);
+        mainStage.setScene(scene);
+        mainStage.setTitle("SETTINGS");
+        mainStage.show();
+
+    }
+
+    public JFXButton backButton() {
+
+        button = new JFXButton("");
+        SVGGlyph arrow = new SVGGlyph(0, "FULLSCREEN", "M402.746 877.254l-320-320c-24.994-24.992-24.994-65.516 0-90.51l320-320c24.994-24.992 65.516-24.992 90.51 0 24.994 24.994 24.994 65.516 0 90.51l-210.746 210.746h613.49c35.346 0 64 28.654 64 64s-28.654 64-64 64h-613.49l210.746 210.746c12.496 12.496 18.744 28.876 18.744 45.254s-6.248 32.758-18.744 45.254c-24.994 24.994-65.516 24.994-90.51 0z", Color.WHITE);
+        arrow.setSize(20, 16);
+        button.setGraphic(arrow);
+        button.setRipplerFill(Color.WHITE);
+
+        button.setOnAction(e -> {
+            this.tabs.getSelectionModel().selectPrevious();
+        });
+
+        return button;
+    }
+
+    public ImageView getImage(String fileName) {
+        ImageView imgView = null;
+        try {
+            String imagePath = "resources/images/" + fileName;
+            Image img = new Image(imagePath);
+            imgView = new ImageView(img);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return imgView;
+    }
+
+
+}
Index: src/terms/term.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/terms/term.java	(revision )
+++ src/terms/term.java	(revision )
@@ -0,0 +1,105 @@
+package terms;
+
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.StringProperty;
+
+import java.time.LocalDate;
+
+/**
+ * Created by FINETEKLABS on 12/4/2017.
+ */
+public class term {
+    private StringProperty termId;
+    private StringProperty termName;
+    private StringProperty activeStatus;
+    private ObjectProperty<LocalDate> openingDate;
+    private ObjectProperty<LocalDate> closingDate;
+    private StringProperty timetablesId;
+    private StringProperty termActivitiesId;
+
+
+    public String getTermId() {
+        return termId.get();
+    }
+
+    public void setTermId(String termId) {
+        this.termId.set(termId);
+    }
+
+    public StringProperty termIdProperty() {
+        return termId;
+    }
+
+    public String getTermName() {
+        return termName.get();
+    }
+
+    public void setTermName(String termName) {
+        this.termName.set(termName);
+    }
+
+    public StringProperty termNameProperty() {
+        return termName;
+    }
+
+    public String getActiveStatus() {
+        return activeStatus.get();
+    }
+
+    public void setActiveStatus(String activeStatus) {
+        this.activeStatus.set(activeStatus);
+    }
+
+    public StringProperty activeStatusProperty() {
+        return activeStatus;
+    }
+
+    public LocalDate getOpeningDate() {
+        return openingDate.get();
+    }
+
+    public void setOpeningDate(LocalDate openingDate) {
+        this.openingDate.set(openingDate);
+    }
+
+    public ObjectProperty<LocalDate> openingDateProperty() {
+        return openingDate;
+    }
+
+    public LocalDate getClosingDate() {
+        return closingDate.get();
+    }
+
+    public void setClosingDate(LocalDate closingDate) {
+        this.closingDate.set(closingDate);
+    }
+
+    public ObjectProperty<LocalDate> closingDateProperty() {
+        return closingDate;
+    }
+
+    public String getTimetablesId() {
+        return timetablesId.get();
+    }
+
+    public void setTimetablesId(String timetablesId) {
+        this.timetablesId.set(timetablesId);
+    }
+
+    public StringProperty timetablesIdProperty() {
+        return timetablesId;
+    }
+
+    public String getTermActivitiesId() {
+        return termActivitiesId.get();
+    }
+
+    public void setTermActivitiesId(String termActivitiesId) {
+        this.termActivitiesId.set(termActivitiesId);
+    }
+
+    public StringProperty termActivitiesIdProperty() {
+        return termActivitiesId;
+    }
+}
+//extend  term
Index: src/exams/exam_marks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/exams/exam_marks.java	(revision )
+++ src/exams/exam_marks.java	(revision )
@@ -0,0 +1,7 @@
+package exams;
+
+/**
+ * Created by FINETEKLABS on 12/6/2017.
+ */
+public class exam_marks {
+}
Index: src/students/student_view.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/students/student_view.java	(revision )
+++ src/students/student_view.java	(revision )
@@ -0,0 +1,39 @@
+package students;
+
+import javafx.scene.control.Tab;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.VBox;
+
+/**
+ * Created by FINETEKLABS on 12/28/2017.
+ */
+public class student_view extends Tab {
+    public student momanyi = new student(" ", "  ", " ", " ", " ", " ", " ", " ", null, null, null, " ");
+    addStudent addstudents = new addStudent(momanyi);
+    addStudent design = new addStudent(momanyi);
+    private BorderPane studentsCenter;
+    private HBox studentActivities;
+    private VBox navigator;
+    private HBox menu;
+
+
+    public student_view(student momanyi, String title) {
+        this.momanyi = momanyi;
+//        designs();
+        init();
+        this.setText(title);
+
+//        bindFieldsToModel();
+
+        this.setContent(init());
+    }
+
+    public BorderPane init() {
+        studentsCenter = new BorderPane();
+        studentsCenter.setCenter(addstudents);
+        studentsCenter.setCenter(design.GeneralInfo());
+        return studentsCenter;
+    }
+
+}
Index: .idea/dataSources/47fd927b-eccc-4662-8e6b-3f88399d697a.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dataSources/47fd927b-eccc-4662-8e6b-3f88399d697a.xml	(revision )
+++ .idea/dataSources/47fd927b-eccc-4662-8e6b-3f88399d697a.xml	(revision )
@@ -0,0 +1,257 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<dataSource name="sims">
+  <database-model serializer="dbm" rdbms="SQLITE" format-version="4.0">
+    <root id="1"/>
+    <schema id="2" parent="1">
+      <Current>1</Current>
+      <Visible>1</Visible>
+    </schema>
+    <table id="3" parent="2" name="levels"/>
+    <table id="4" parent="2" name="parents"/>
+    <table id="5" parent="2" name="school"/>
+    <table id="6" parent="2" name="students"/>
+    <column id="7" parent="3" name="levelId">
+      <DataType>INT(50)(0,-1)|4</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="8" parent="3" name="levelName">
+      <Position>1</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;&quot; &quot;&apos;</DefaultExpression>
+    </column>
+    <column id="9" parent="3" name="levelDescription">
+      <Position>2</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;&quot; &quot;&apos;</DefaultExpression>
+    </column>
+    <column id="10" parent="3" name="supervisorId">
+      <Position>3</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <DefaultExpression>&apos;&quot; &quot;&apos;</DefaultExpression>
+    </column>
+    <column id="11" parent="3" name="currentTermId">
+      <Position>4</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <DefaultExpression>&apos;&quot; &quot;&apos;</DefaultExpression>
+    </column>
+    <column id="12" parent="3" name="levelFeeStructureId">
+      <Position>5</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <DefaultExpression>&apos;&quot; &quot;&apos;</DefaultExpression>
+    </column>
+    <column id="13" parent="3" name="levelMaxPopulation">
+      <Position>6</Position>
+      <DataType>VARCHAR(10)(0,-1)|12</DataType>
+      <DefaultExpression>&apos;&quot; &quot;&apos;</DefaultExpression>
+    </column>
+    <column id="14" parent="3" name="levelPassMarks">
+      <Position>7</Position>
+      <DataType>INTEGER(20)(0,-1)|4</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="15" parent="3" name="levelFees">
+      <Position>8</Position>
+      <DataType>DOUBLE(20)(0,-1)|6</DataType>
+      <DefaultExpression>0.0</DefaultExpression>
+    </column>
+    <column id="16" parent="4" name="parentId">
+      <DataType>INT(0,-1)|4</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="17" parent="4" name="firstName">
+      <Position>1</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="18" parent="4" name="lastName">
+      <Position>2</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="19" parent="4" name="occupation">
+      <Position>3</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="20" parent="4" name="unnamed">
+      <Position>4</Position>
+      <DataType>VARCHAR(40)(0,-1)|12</DataType>
+    </column>
+    <column id="21" parent="4" name="Role">
+      <Position>5</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="22" parent="4" name="phoneNumber">
+      <Position>6</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+    </column>
+    <column id="23" parent="4" name="emailAddress">
+      <Position>7</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="24" parent="4" name="mobileNumber">
+      <Position>8</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="25" parent="4" name="postalAddress">
+      <Position>9</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="26" parent="4" name="password">
+      <Position>10</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="27" parent="4" name="activeStatus">
+      <Position>11</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="28" parent="4" name="nationalId">
+      <Position>12</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+    </column>
+    <index id="29" parent="4" name="parents_parentId_uindex">
+      <ColNames>parentId</ColNames>
+      <Unique>1</Unique>
+    </index>
+    <column id="30" parent="5" name="schoolId">
+      <DataType>INT(0,-1)|4</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="31" parent="5" name="schoolName">
+      <Position>1</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="32" parent="5" name="centerCode">
+      <Position>2</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="33" parent="5" name="schoolRegistration">
+      <Position>3</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+      <DefaultExpression>&apos;&apos;</DefaultExpression>
+    </column>
+    <column id="34" parent="5" name="academicYear">
+      <Position>4</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="35" parent="5" name="location">
+      <Position>5</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="36" parent="5" name="address">
+      <Position>6</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="37" parent="5" name="telephone">
+      <Position>7</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="38" parent="5" name="mobile">
+      <Position>8</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+    </column>
+    <column id="39" parent="5" name="website">
+      <Position>9</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="40" parent="5" name="email">
+      <Position>10</Position>
+      <DataType>VARCHAR(50)(0,-1)|12</DataType>
+    </column>
+    <column id="41" parent="5" name="currentTerm">
+      <Position>11</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <column id="42" parent="5" name="activeState">
+      <Position>12</Position>
+      <DataType>VARCHAR(30)(0,-1)|12</DataType>
+    </column>
+    <index id="43" parent="5" name="school_schoolId_uindex">
+      <ColNames>schoolId</ColNames>
+      <Unique>1</Unique>
+    </index>
+    <index id="44" parent="5" name="school_currentTerm_uindex">
+      <ColNames>currentTerm</ColNames>
+      <Unique>1</Unique>
+    </index>
+    <column id="45" parent="6" name="firstName">
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="46" parent="6" name="middleName">
+      <Position>1</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="47" parent="6" name="lastName">
+      <Position>2</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="48" parent="6" name="studentId">
+      <Position>3</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="49" parent="6" name="parentId">
+      <Position>4</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="50" parent="6" name="activeState">
+      <Position>5</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="51" parent="6" name="email">
+      <Position>6</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="52" parent="6" name="currentClassId">
+      <Position>7</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="53" parent="6" name="admissionDate">
+      <Position>8</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="54" parent="6" name="clearanceDate">
+      <Position>9</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+    <column id="55" parent="6" name="dateOfBirth">
+      <Position>10</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+    </column>
+    <column id="56" parent="6" name="home">
+      <Position>11</Position>
+      <DataType>TEXT(0,-1)|12</DataType>
+      <DefaultExpression>&apos; &apos;</DefaultExpression>
+    </column>
+  </database-model>
+</dataSource>
\ No newline at end of file
Index: src/fees/payable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/fees/payable.java	(revision )
+++ src/fees/payable.java	(revision )
@@ -0,0 +1,7 @@
+package fees;
+
+/**
+ * Created by FINETEKLABS on 12/5/2017.
+ */
+public interface payable {
+}
Index: src/sample/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/Controller.java	(revision )
+++ src/sample/Controller.java	(revision )
@@ -0,0 +1,4 @@
+package sample;
+
+public class Controller {
+}
Index: src/parents/addParent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/parents/addParent.java	(revision )
+++ src/parents/addParent.java	(revision )
@@ -0,0 +1,366 @@
+package parents;
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.controls.JFXPasswordField;
+import com.jfoenix.controls.JFXTextField;
+import javafx.scene.control.Label;
+import javafx.scene.layout.GridPane;
+
+/**
+ * Created by FINETEKLABS on 1/9/2018.
+ */
+public class addParent extends GridPane {
+
+
+    protected parent momanyi = new parent(" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ");
+    Label parentId = new Label(" parent  id");
+    Label firstName = new Label(" first name");
+    Label lastName = new Label(" last name");
+    Label occupation = new Label(" occupation");
+    Label role = new Label(" roles");
+    Label phoneNumber = new Label(" phone number");
+    Label emailAddress = new Label(" email address");
+    Label mobileAddress = new Label(" mobile number");
+    Label postalAddress = new Label(" postal address");
+    Label password = new Label(" password");
+    Label activeStatus = new Label(" active status");
+    Label nationalId = new Label("national id.No");
+    Label homeAddress = new Label("home address");
+    //Buttons
+    JFXButton saveButton = new JFXButton("save");
+    JFXButton closeButton = new JFXButton("close");
+    // textfields
+    JFXTextField parentFirstNameField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField parentLastNameField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField homeField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField parentNationalIdField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField parentIdFieldField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField occupationField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField roleField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField emailAddressField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField postalAddressField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField passwordField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField activeStatusField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXPasswordField mobileNumberField = new JFXPasswordField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXPasswordField phoneNumberField = new JFXPasswordField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+
+    public addParent(parent momanyi) {
+        this.momanyi = momanyi;
+        layoutField();
+    }
+
+
+    public GridPane layoutField() {
+        this.setHgap(15);
+        this.setVgap(10);
+
+        this.add(parentId, 1, 1);
+        this.add(firstName, 1, 2);
+        this.add(lastName, 3, 2);
+        this.add(role, 1, 4);
+        this.add(occupation, 3, 4);
+        this.add(phoneNumber, 1, 5);
+        this.add(mobileAddress, 3, 5);
+        this.add(homeAddress, 1, 6);
+        this.add(postalAddress, 1, 8);
+        this.add(password, 1, 9);
+        this.add(nationalId, 1, 10);
+        this.add(emailAddress, 1, 11);
+
+        this.add(parentIdFieldField, 2, 1);
+        this.add(parentFirstNameField, 2, 2);
+        this.add(parentLastNameField, 4, 2);
+        this.add(roleField, 2, 4);
+        this.add(occupationField, 4, 4);
+        this.add(phoneNumberField, 2, 5);
+        this.add(mobileNumberField, 4, 5);
+        this.add(homeField, 2, 6);
+        this.add(postalAddressField, 2, 8);
+        this.add(passwordField, 2, 9);
+        this.add(parentNationalIdField, 2, 10);
+        this.add(emailAddressField, 2, 11);
+
+
+//        this.add(phoneNumberField,2,9);
+
+//        this.add(postalAddressField,2,11);
+        this.add(saveButton, 5, 13);
+        this.add(closeButton, 6, 13);
+        return this;
+    }
+
+
+}
Index: src/parents/parentOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/parents/parentOptions.java	(revision )
+++ src/parents/parentOptions.java	(revision )
@@ -0,0 +1,53 @@
+package parents;
+
+import com.jfoenix.controls.JFXButton;
+import javafx.geometry.Insets;
+import javafx.geometry.Pos;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import javafx.scene.layout.HBox;
+
+/**
+ * Created by FINETEKLABS on 1/16/2018.
+ */
+public class parentOptions extends HBox {
+    Label add = new Label("new parent");
+    Label close = new Label("close");
+    Label logout = new Label("logout");
+    Label edit = new Label("edit");
+    Label exportToExcel = new Label("export to excel");
+    Label exportToPdf = new Label("export to pdf");
+
+
+    //JFX BUTTONS
+    JFXButton addField = new JFXButton(" add");
+    JFXButton exporToPdfField = new JFXButton(" pdf");
+    JFXButton exportToExcelField = new JFXButton(" excel");
+    JFXButton loggedIn = new JFXButton("user");
+
+
+    TextField searchField = new TextField();
+
+
+    //comboBoxes
+    public parentOptions() {
+        this.setStyle("-fx-padding: 10;" + "-fx-border-style: solid inside;"
+                + "-fx-border-width: 2;" + "-fx-border-insets: 5;"
+                + "-fx-border-radius: 5;" + "-fx-border-color: darkgray;");
+        this.setMinWidth(500);
+        layoutField();
+    }
+
+    public HBox layoutField() {
+
+        this.setSpacing(10);
+        this.setPadding(new Insets(5, 5, 5, 5));
+        this.getChildren().addAll(addField, exporToPdfField, exportToExcelField, searchField, loggedIn);
+        this.setAlignment(Pos.CENTER);
+        //this.setMaxHeight(250);
+
+        return this;
+    }
+
+
+}
Index: src/schools/school.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/school.java	(revision )
+++ src/schools/school.java	(revision )
@@ -0,0 +1,271 @@
+package schools;
+
+import database.saveSchool;
+import javafx.beans.property.ReadOnlyIntegerWrapper;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * Created by FINETEKLABS on 11/29/2017.
+ */
+public class school {
+
+    private static ExecutorService executor;
+    private static AtomicInteger schoolsSequence = new AtomicInteger(0);
+    ;
+    private final ReadOnlyIntegerWrapper schoolId =
+            new ReadOnlyIntegerWrapper(this, "schoolId", schoolsSequence.incrementAndGet());
+    private final StringProperty schoolName = new SimpleStringProperty(this, "schoolName", null);
+    private final StringProperty centerCode = new SimpleStringProperty(this, "centerCode", null);
+    private final StringProperty schoolRegistration = new SimpleStringProperty(this, "schoolRegistration", null);
+    private final StringProperty academicYear = new SimpleStringProperty(this, "academicYear", null);
+    private final StringProperty location = new SimpleStringProperty(this, "location", null);
+    private final StringProperty address = new SimpleStringProperty(this, "address", null);
+    private final StringProperty telephone = new SimpleStringProperty(this, "telephone", null);
+    private final StringProperty mobile = new SimpleStringProperty(this, "mobile", null);
+    private final StringProperty website = new SimpleStringProperty(this, "website", null);
+    private final StringProperty email = new SimpleStringProperty(this, "email", null);
+    private final StringProperty currentTerm = new SimpleStringProperty(this, "currentTerm", null);
+    private final StringProperty activeState = new SimpleStringProperty(this, "activeState", null);
+
+    public school() {
+        this(1, null, null, null, null, null, null, null, null, null, null, null);
+    }
+
+
+    public school(int schoolId, String schoolName, String centerCode, String academicYear, String location, String address, String mobile,
+                  String telephone, String website, String email, String currentTerm, String activeState) {
+        this.academicYear.set(academicYear);
+        this.activeState.set(activeState);
+        this.address.set(address);
+        this.centerCode.set(centerCode);
+        this.currentTerm.set(currentTerm);
+        this.mobile.set(mobile);
+        this.telephone.set(telephone);
+        this.schoolName.set(schoolName);
+        this.website.set(website);
+        this.location.set(location);
+        this.schoolId.set(schoolId);
+        this.email.set(email);
+    }
+
+    public static AtomicInteger getSchoolsSequence() {
+        return schoolsSequence;
+    }
+
+    public static void setSchoolsSequence(AtomicInteger schoolsSequence) {
+        school.schoolsSequence = schoolsSequence;
+    }
+
+    public int getSchoolId() {
+        return schoolId.get();
+    }
+
+    public void setSchoolId(int schoolId) {
+        this.schoolId.set(schoolId);
+    }
+
+    public ReadOnlyIntegerWrapper schoolIdProperty() {
+        return schoolId;
+    }
+
+    public String getSchoolName() {
+        return schoolName.get();
+    }
+
+    public void setSchoolName(String schoolName) {
+        this.schoolName.set(schoolName);
+    }
+
+    public StringProperty schoolNameProperty() {
+        return schoolName;
+    }
+
+    public String getCenterCode() {
+        return centerCode.get();
+    }
+
+    public void setCenterCode(String centerCode) {
+        this.centerCode.set(centerCode);
+    }
+
+    public StringProperty centerCodeProperty() {
+        return centerCode;
+    }
+
+    public String getSchoolRegistration() {
+        return schoolRegistration.get();
+    }
+
+    public void setSchoolRegistration(String schoolRegistration) {
+        this.schoolRegistration.set(schoolRegistration);
+    }
+
+    public StringProperty schoolRegistrationProperty() {
+        return schoolRegistration;
+    }
+
+    public String getAcademicYear() {
+        return academicYear.get();
+    }
+
+    public void setAcademicYear(String academicYear) {
+        this.academicYear.set(academicYear);
+    }
+
+    public StringProperty academicYearProperty() {
+        return academicYear;
+    }
+
+    public String getLocation() {
+        return location.get();
+    }
+
+    public void setLocation(String location) {
+        this.location.set(location);
+    }
+
+    public StringProperty locationProperty() {
+        return location;
+    }
+
+    public String getAddress() {
+        return address.get();
+    }
+
+    public void setAddress(String address) {
+        this.address.set(address);
+    }
+
+    public StringProperty addressProperty() {
+        return address;
+    }
+
+    public String getTelephone() {
+        return telephone.get();
+    }
+
+    public void setTelephone(String telephone) {
+        this.telephone.set(telephone);
+    }
+
+    public StringProperty telephoneProperty() {
+        return telephone;
+    }
+
+    public String getMobile() {
+        return mobile.get();
+    }
+
+    public void setMobile(String mobile) {
+        this.mobile.set(mobile);
+    }
+
+    public StringProperty mobileProperty() {
+        return mobile;
+    }
+
+    public String getWebsite() {
+        return website.get();
+    }
+
+    public void setWebsite(String website) {
+        this.website.set(website);
+    }
+
+    public StringProperty websiteProperty() {
+        return website;
+    }
+
+    public String getEmail() {
+        return email.get();
+    }
+
+    public void setEmail(String email) {
+        this.email.set(email);
+    }
+
+    public StringProperty emailProperty() {
+        return email;
+    }
+
+    public String getCurrentTerm() {
+        return currentTerm.get();
+    }
+
+    public void setCurrentTerm(String currentTerm) {
+        this.currentTerm.set(currentTerm);
+    }
+
+    public StringProperty currentTermProperty() {
+        return currentTerm;
+    }
+
+    public String getActiveState() {
+        return activeState.get();
+    }
+
+    public void setActiveState(String activeState) {
+        this.activeState.set(activeState);
+    }
+
+    public StringProperty activeStateProperty() {
+        return activeState;
+    }
+
+    public Boolean isValidSchool(school mySchool, List<String> errorList) {
+        boolean isValid = true;
+
+        String sname = mySchool.getSchoolName();
+        if (sname == null || sname.trim().length() <= 5) {
+            errorList.add("school name must contain more than 5 characters");
+            isValid = false;
+        }
+        Integer sid = mySchool.getSchoolId();
+
+        if (sid == null || sid < 1) {
+            errorList.add(" your school does not have a valid school id");
+
+        }
+        String stelephone = mySchool.getTelephone();
+        if (stelephone == null || stelephone.trim().length() <= 5) {
+            errorList.add("telephone must be atleast 5 numbers");
+            isValid = false;
+            ;
+        }
+
+
+        return isValid;
+    }
+
+    public boolean isValidSchool(List<String> errorList) {
+        return isValidSchool(this, errorList);
+    }
+
+    public boolean save(List<String> errorList, school maseno) {
+        boolean isSaved = false;
+
+        if (isValidSchool(errorList)) {
+            executor = Executors.newFixedThreadPool(2);
+            executor.execute(new saveSchool(maseno));
+            isSaved = true;
+        }
+
+        //save to db
+        //save to db
+        return isSaved;
+
+    }
+
+
+    public enum schoolCategory {
+        PRIVATE, PUBLIC, SECONDARY, PRIMARY, SENIOR,
+    }
+
+
+}
Index: src/database/currentDb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/database/currentDb.java	(revision )
+++ src/database/currentDb.java	(revision )
@@ -0,0 +1,29 @@
+package database;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+
+/**
+ * Created by FINETEKLABS on 12/17/2017.
+ */
+public class currentDb {
+
+
+    public static Connection sqlite_connect() {
+        // SQLite connection string
+
+        String url = "jdbc:sqlite:D:\\IdeaProjects\\SIMS\\src\\resources\\sims.sqlite";
+        Connection conn = null;
+
+        try {
+            Class.forName("org.sqlite.JDBC");
+            conn = DriverManager.getConnection(url);
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+        return conn;
+    }
+}
Index: src/schools/schoolDetailsTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/schoolDetailsTab.java	(revision )
+++ src/schools/schoolDetailsTab.java	(revision )
@@ -0,0 +1,169 @@
+//package schools;
+//
+///**
+// * Created by FINETEKLABS on 12/24/2017.
+// */
+//
+//import com.jfoenix.controls.JFXButton;
+//import com.jfoenix.controls.JFXScrollPane;
+//import com.jfoenix.svg.SVGGlyph;
+//import javafx.geometry.Insets;
+//import javafx.geometry.Orientation;
+//import javafx.geometry.Pos;
+//import javafx.scene.Scene;
+//import javafx.scene.control.*;
+//import javafx.scene.layout.BorderPane;
+//import javafx.scene.layout.StackPane;
+//import javafx.scene.layout.VBox;
+//import javafx.scene.paint.Color;
+//import javafx.stage.Modality;
+//import javafx.stage.Stage;
+//import javafx.stage.StageStyle;
+//
+//import java.util.ArrayList;
+//import java.util.List;
+//
+//
+//public class schoolDetailsTab extends Tab {
+//    private school mySchool;
+//    private  school_view myView;
+//    private BorderPane centraldata;
+//    public VBox border;
+//    private  VBox  leftarea;
+//    public   BorderPane innerborder;
+//    school mychama= new school();
+//    schoolView myCompanySettings= new schoolView(mychama);
+//
+//    public schoolDetailsTab(String title,school mySchool,school_view myView)
+//    {
+//        this.setText(title);
+//        this.mySchool=mySchool;
+//        this.myView=myView;
+//        init();
+//
+//    }
+//    public void init() {
+//
+//
+//        this.setContent(GeneralInfo());
+//        attachEvents();
+//    }
+//
+//    private  void attachEvents(){
+//        myView.setHgap(5);
+//        myView.setVgap(5);
+//        myView.saveButton.setOnAction(e->saveData());
+//        myView.closeButton.setOnAction(e -> myView.getScene().getWindow().hide());
+//        myView.locationField.setPromptText(" enter location");
+//        myView.centerCodeField.setPromptText(" center code");
+//        myView.mobileField.setPromptText(" mobile number");
+//        myView.websiteField.setPromptText(" your website");
+//        myView.schoolNameField.setPromptText("School name");
+//
+//    }
+//
+//    private void saveData() {
+//        List<String> errorList = new ArrayList<>();
+//        boolean isSaved = mySchool.save(errorList);
+//        if (!isSaved) {
+//            this.showError(errorList);
+//        }
+//    }
+//
+//    public SplitPane GeneralInfo() {
+//
+//
+//
+//
+//        JFXScrollPane pane = new JFXScrollPane();
+//        pane.setContent(myCompanySettings);
+//
+//        JFXButton button = new JFXButton("");
+//        SVGGlyph arrow = new SVGGlyph(0, "FULLSCREEN", "M402.746 877.254l-320-320c-24.994-24.992-24.994-65.516 0-90.51l320-320c24.994-24.992 65.516-24.992 90.51 0 24.994 24.994 24.994 65.516 0 90.51l-210.746 210.746h613.49c35.346 0 64 28.654 64 64s-28.654 64-64 64h-613.49l210.746 210.746c12.496 12.496 18.744 28.876 18.744 45.254s-6.248 32.758-18.744 45.254c-24.994 24.994-65.516 24.994-90.51 0z", Color.WHITE);
+//        arrow.setSize(20, 16);
+//        button.setGraphic(arrow);
+//        button.setRipplerFill(Color.WHITE);
+//
+//        button.setOnAction(e->{
+//            //companyPane.tabs.getSelectionModel().selectPrevious();
+//        });
+//        pane.getTopBar().getChildren().add(button);
+//
+//        Label title = new Label("SCHOOL INFORMATION");
+//        pane.getMainHeader().getChildren().add(title);
+//        title.setStyle("-fx-text-fill:WHITE; -fx-font-size: 40;");
+//        JFXScrollPane.smoothScrolling((ScrollPane) pane.getChildren().get(0));
+//        pane.getTopBar().setMaxHeight(50);
+//        //pane.getCondensedHeader().getChildren().add(title)
+//        pane.getBottomBar().setMaxHeight(50);
+//        pane.setAlignment(title, Pos.CENTER_LEFT);
+//        pane.setAlignment(button,Pos.CENTER_LEFT);
+//
+//      //  myCompanySettings.chooser.getStyleClass().add("button-raised");
+//
+//
+//        // Create a horizontal separator
+//        Separator separator1 = new Separator();
+//// Change the orientation to vertical
+//        separator1.setOrientation(Orientation.VERTICAL);
+//// Create a vertical separator
+//        Separator separator2 = new Separator(Orientation.VERTICAL);
+//
+//        SplitPane  devidescreen= new SplitPane();
+//
+//
+//
+//        innerborder= new BorderPane();
+//        leftarea= new VBox();
+//     //   leftarea.getChildren().addAll(common.homeAccess.quickAccess());
+//
+//        innerborder.setCenter(leftarea);
+//        centraldata= new BorderPane();
+////        centraldata.setTop(memberDataForm.mainmenu());
+//        centraldata.setCenter(pane);
+////        centraldata.setBottom(memberDataForm.Add());
+//        centraldata.setPadding( new Insets(10,10,10,10));
+//
+//        border = new VBox();
+//        // border.getChildren().addAll(homeAccess.quickAccess());
+////        VBox headers = null;
+////        headers = new VBox();
+////        headers.getChildren().addAll(mainmenu(),top());
+////
+////        border.setTop(headers);
+//        //  border.setCenter();
+//        devidescreen.getItems().addAll(leftarea, centraldata);
+//        //border.setPadding( new Insets(10,10,10,10));
+////        // border.setRight(itemcounter());
+//        devidescreen.setDividerPositions(0.15);
+//        //
+//        leftarea.maxWidthProperty().bind(devidescreen.widthProperty().multiply(0.20));
+//        return devidescreen;
+//    }
+//
+//    public void showError(List<String> errorList) {
+//        String msg = "";
+//        if (errorList.isEmpty()) {
+//            msg = "No message to display.";
+//        } else {
+//            for (String s : errorList) {
+//                msg = msg + s + "\n";
+//            }
+//        }
+//        Label msgLbl = new Label(msg);
+//        Button okBtn = new Button("OK");
+//        VBox root = new VBox(new StackPane(msgLbl), new StackPane(okBtn));
+//        root.setSpacing(10);
+//        Scene scene = new Scene(root);
+//        Stage stage = new Stage(StageStyle.UTILITY);
+//        stage.initModality(Modality.WINDOW_MODAL);
+//        stage.setScene(scene);
+//        stage.initOwner(myView.getScene().getWindow());
+//// Set the Action listener for the OK button
+//        okBtn.setOnAction(e -> stage.close());
+//        stage.setTitle("Error");
+//        stage.sizeToScene();
+//        stage.showAndWait();
+//    }
+//
+//}
Index: src/fees/fine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/fees/fine.java	(revision )
+++ src/fees/fine.java	(revision )
@@ -0,0 +1,7 @@
+package fees;
+
+/**
+ * Created by FINETEKLABS on 12/3/2017.
+ */
+public class fine {
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision )
+++ .idea/vcs.xml	(revision )
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/database/saveStudent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/database/saveStudent.java	(revision )
+++ src/database/saveStudent.java	(revision )
@@ -0,0 +1,91 @@
+package database;
+
+import org.apache.commons.dbutils.DbUtils;
+import students.student;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.time.LocalDate;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+/**
+ * Created by FINETEKLABS on 12/17/2017.
+ */
+public class saveStudent implements Runnable {
+    private static Lock lock = new ReentrantLock();
+
+
+    private String studentId;
+    private String firstName;
+    private String middleName;
+    private String lastName;
+    private String parentId;
+    private String email;
+    private String currentClassId;
+    private String activeState;
+    private String home;
+    private LocalDate clearanceDate;
+    private LocalDate dateOfBirth;
+    private LocalDate admissionDate;
+
+
+    public saveStudent(student momanyi) {
+        this.studentId = momanyi.getStudentId();
+        this.firstName = momanyi.getFirstName();
+        this.lastName = momanyi.getLastName();
+        this.middleName = momanyi.getMiddleName();
+        this.parentId = momanyi.getParentId();
+        this.email = momanyi.getEmail();
+        this.currentClassId = momanyi.getCurrentClassId();
+        this.activeState = momanyi.getActiveState();
+        this.home = momanyi.getHome();
+        this.clearanceDate = momanyi.getClearanceDate();
+        this.dateOfBirth = momanyi.getDateOfBirth();
+        this.admissionDate = momanyi.getAdmissionDate();
+    }
+
+    @Override
+    public void run() {
+        PreparedStatement pstmt = null;
+        Connection conn = null;
+        ResultSet rs = null;
+
+        try {
+            conn = currentDb.sqlite_connect();
+            lock.lock();
+            Thread.sleep(1000);
+            String sql = "INSERT INTO students (   studentId, firstName,middleName, lastName,  parentId,email,currentClassId,home, admissionDate, clearanceDate, dateOfBirth,activeState) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
+
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setString(1, studentId);
+            pstmt.setString(2, firstName);
+            pstmt.setString(3, middleName);
+            pstmt.setString(4, lastName);
+            pstmt.setString(5, parentId);
+            pstmt.setString(6, email);
+            pstmt.setString(7, currentClassId);
+            pstmt.setString(8, home);
+            pstmt.setDate(9, java.sql.Date.valueOf(admissionDate));
+            pstmt.setDate(10, java.sql.Date.valueOf(clearanceDate));
+            pstmt.setDate(11, java.sql.Date.valueOf(dateOfBirth));
+            pstmt.setString(12, activeState);
+
+
+            pstmt.executeUpdate();
+        } catch (SQLException e) {
+
+            System.out.println(e.getMessage());
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } finally {
+            DbUtils.closeQuietly(rs);
+            DbUtils.closeQuietly(pstmt);
+            DbUtils.closeQuietly(conn);
+            lock.unlock();
+        }
+    }
+}
+
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision )
+++ .idea/modules.xml	(revision )
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/SIMS.iml" filepath="$PROJECT_DIR$/SIMS.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/schools/schoolView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/schools/schoolView.java	(revision )
+++ src/schools/schoolView.java	(revision )
@@ -0,0 +1,257 @@
+package schools;
+
+import com.jfoenix.controls.JFXButton;
+import com.jfoenix.controls.JFXTextField;
+import javafx.scene.control.Label;
+import javafx.scene.layout.GridPane;
+import javafx.scene.layout.VBox;
+
+/**
+ * Created by FINETEKLABS on 12/10/2017.
+ */
+public class schoolView extends GridPane {
+
+
+    //labels
+    Label schoolName = new Label("SCHOOL NAME:");
+    Label schoolId = new Label("SCHOOL ID");
+    Label location = new Label("LOCATION");
+    Label taxNumber = new Label("TAX NUMBER");
+    Label centerCode = new Label("CENTER CODE");
+    Label schoolRegistration = new Label("SCHOOL REGISTRATION");
+    Label telephone = new Label("TELEPHONE");
+    Label mobile = new Label("MOBILE");
+    Label website = new Label("WEBSITE");
+    Label currentTerm = new Label("CURRENT TERM");
+    Label academicYear = new Label(" ACADEMIC  YEAR");
+    Label schoolCategory = new Label(" SCHOOL CATEGORY");
+    //TextFields
+    JFXTextField schoolNameField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField schoolIdField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField locationField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField categoryField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField centerCodeField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField websiteField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField mobileField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    JFXTextField telephoneField = new JFXTextField() {
+        final int maxChars = 50;
+        final String restrictTo = "[0-9,A-Z ]";
+
+        @Override
+        public void replaceText(int start, int end, String text) {
+            if (matchTest(text)) {
+                super.replaceText(start, end, text);
+            }
+        }
+
+        @Override
+        public void replaceSelection(String text) {
+            if (matchTest(text)) {
+                super.replaceSelection(text);
+            }
+        }
+
+        private boolean matchTest(String text) {
+            return text.isEmpty() || (text.matches(restrictTo) && getText().length() < maxChars);
+        }
+    };
+    //Buttons
+    JFXButton saveButton = new JFXButton("save");
+    JFXButton closeButton = new JFXButton("close");
+    private school myschool;
+
+    public schoolView(school myschool) {
+        this.myschool = myschool;
+        layoutField();
+        bindFieldsToModel();
+    }
+
+    private void layoutField() {
+        this.setHgap(5);
+        this.setVgap(5);
+
+        this.add(schoolId, 1, 1);
+        this.add(schoolName, 1, 2);
+        this.add(schoolCategory, 1, 3);
+
+        this.add(location, 1, 4);
+        this.add(telephone, 1, 5);
+        this.add(mobile, 1, 6);
+        this.add(centerCode, 1, 7);
+        this.add(website, 1, 8);
+        this.add(academicYear, 1, 9);
+
+
+        this.add(schoolIdField, 2, 1);
+        this.add(schoolNameField, 2, 2);
+        this.add(categoryField, 2, 3);
+        this.add(locationField, 2, 4);
+        this.add(telephoneField, 2, 5);
+        this.add(mobileField, 2, 6);
+        this.add(centerCodeField, 2, 7);
+        this.add(websiteField, 2, 8);
+
+        VBox buttonBox = new VBox(saveButton, closeButton);
+        saveButton.setMaxWidth(Double.MAX_VALUE);
+        closeButton.setMaxWidth(Double.MAX_VALUE);
+
+
+        this.add(buttonBox, 3, 1, 1, 5);
+    }
+
+
+    public void bindFieldsToModel() {
+        schoolIdField.textProperty().bind(myschool.schoolIdProperty().asString());
+        schoolNameField.textProperty().bindBidirectional(myschool.schoolNameProperty());
+        locationField.textProperty().bindBidirectional(myschool.locationProperty());
+    }
+
+
+}
Index: src/levels/level.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/levels/level.java	(revision )
+++ src/levels/level.java	(revision )
@@ -0,0 +1,129 @@
+package levels;
+
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.IntegerProperty;
+import javafx.beans.property.StringProperty;
+
+/**
+ * Created by FINETEKLABS on 12/3/2017.
+ */
+public class level {
+    private IntegerProperty levelId;
+    private StringProperty levelName;
+    private StringProperty levelDescription;
+    private StringProperty supervisorId;
+    private StringProperty currentTermId;
+    private StringProperty levelFeeStructureId;
+    private StringProperty levelMaxPopulation;
+    private IntegerProperty levelPassMarks;
+    private DoubleProperty levelFees;
+
+
+    public int getLevelId() {
+        return levelId.get();
+    }
+
+    public void setLevelId(int levelId) {
+        this.levelId.set(levelId);
+    }
+
+    public IntegerProperty levelIdProperty() {
+        return levelId;
+    }
+
+    public String getLevelName() {
+        return levelName.get();
+    }
+
+    public void setLevelName(String levelName) {
+        this.levelName.set(levelName);
+    }
+
+    public StringProperty levelNameProperty() {
+        return levelName;
+    }
+
+    public String getLevelDescription() {
+        return levelDescription.get();
+    }
+
+    public void setLevelDescription(String levelDescription) {
+        this.levelDescription.set(levelDescription);
+    }
+
+    public StringProperty levelDescriptionProperty() {
+        return levelDescription;
+    }
+
+    public String getSupervisorId() {
+        return supervisorId.get();
+    }
+
+    public void setSupervisorId(String supervisorId) {
+        this.supervisorId.set(supervisorId);
+    }
+
+    public StringProperty supervisorIdProperty() {
+        return supervisorId;
+    }
+
+    public String getCurrentTermId() {
+        return currentTermId.get();
+    }
+
+    public void setCurrentTermId(String currentTermId) {
+        this.currentTermId.set(currentTermId);
+    }
+
+    public StringProperty currentTermIdProperty() {
+        return currentTermId;
+    }
+
+    public String getLevelFeeStructureId() {
+        return levelFeeStructureId.get();
+    }
+
+    public void setLevelFeeStructureId(String levelFeeStructureId) {
+        this.levelFeeStructureId.set(levelFeeStructureId);
+    }
+
+    public StringProperty levelFeeStructureIdProperty() {
+        return levelFeeStructureId;
+    }
+
+    public String getLevelMaxPopulation() {
+        return levelMaxPopulation.get();
+    }
+
+    public void setLevelMaxPopulation(String levelMaxPopulation) {
+        this.levelMaxPopulation.set(levelMaxPopulation);
+    }
+
+    public StringProperty levelMaxPopulationProperty() {
+        return levelMaxPopulation;
+    }
+
+    public int getLevelPassMarks() {
+        return levelPassMarks.get();
+    }
+
+    public void setLevelPassMarks(int levelPassMarks) {
+        this.levelPassMarks.set(levelPassMarks);
+    }
+
+    public IntegerProperty levelPassMarksProperty() {
+        return levelPassMarks;
+    }
+
+    public double getLevelFees() {
+        return levelFees.get();
+    }
+
+    public void setLevelFees(double levelFees) {
+        this.levelFees.set(levelFees);
+    }
+
+    public DoubleProperty levelFeesProperty() {
+        return levelFees;
+    }
+}
Index: src/fees/classification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/fees/classification.java	(revision )
+++ src/fees/classification.java	(revision )
@@ -0,0 +1,14 @@
+package fees;
+
+import javafx.beans.property.IntegerProperty;
+import javafx.beans.property.StringProperty;
+
+/**
+ * Created by FINETEKLABS on 12/3/2017.
+ */
+public class classification {
+    private IntegerProperty classificationId;
+    private IntegerProperty classificationName;
+    private StringProperty classificationDescription;
+
+}
Index: src/fees/fee.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/fees/fee.java	(revision )
+++ src/fees/fee.java	(revision )
@@ -0,0 +1,117 @@
+package fees;
+
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.StringProperty;
+
+import java.time.LocalDate;
+
+/**
+ * Created by FINETEKLABS on 12/3/2017.
+ */
+public class fee {
+    StringProperty payableAccounts;
+    private StringProperty feeId;
+    private StringProperty classificationId;
+    private StringProperty feeCategory;
+    private DoubleProperty ammount;
+    private ObjectProperty<LocalDate> creationDate;
+    private ObjectProperty<LocalDate> deadLine;
+    private StringProperty activeState;
+
+    public String getFeeId() {
+        return feeId.get();
+    }
+
+    public void setFeeId(String feeId) {
+        this.feeId.set(feeId);
+    }
+
+    public StringProperty feeIdProperty() {
+        return feeId;
+    }
+
+    public String getClassificationId() {
+        return classificationId.get();
+    }
+
+    public void setClassificationId(String classificationId) {
+        this.classificationId.set(classificationId);
+    }
+
+    public StringProperty classificationIdProperty() {
+        return classificationId;
+    }
+
+    public String getPayableAccounts() {
+        return payableAccounts.get();
+    }
+
+    public void setPayableAccounts(String payableAccounts) {
+        this.payableAccounts.set(payableAccounts);
+    }
+
+    public StringProperty payableAccountsProperty() {
+        return payableAccounts;
+    }
+
+    public String getFeeCategory() {
+        return feeCategory.get();
+    }
+
+    public void setFeeCategory(String feeCategory) {
+        this.feeCategory.set(feeCategory);
+    }
+
+    public StringProperty feeCategoryProperty() {
+        return feeCategory;
+    }
+
+    public double getAmmount() {
+        return ammount.get();
+    }
+
+    public void setAmmount(double ammount) {
+        this.ammount.set(ammount);
+    }
+
+    public DoubleProperty ammountProperty() {
+        return ammount;
+    }
+
+    public LocalDate getCreationDate() {
+        return creationDate.get();
+    }
+
+    public void setCreationDate(LocalDate creationDate) {
+        this.creationDate.set(creationDate);
+    }
+
+    public ObjectProperty<LocalDate> creationDateProperty() {
+        return creationDate;
+    }
+
+    public LocalDate getDeadLine() {
+        return deadLine.get();
+    }
+
+    public void setDeadLine(LocalDate deadLine) {
+        this.deadLine.set(deadLine);
+    }
+
+    public ObjectProperty<LocalDate> deadLineProperty() {
+        return deadLine;
+    }
+
+    public String getActiveState() {
+        return activeState.get();
+    }
+
+    public void setActiveState(String activeState) {
+        this.activeState.set(activeState);
+    }
+
+    public StringProperty activeStateProperty() {
+        return activeState;
+    }
+}
diff --git src/resources/sims.sqlite src/resources/sims.sqlite
new file mode 100644
index 0000000000000000000000000000000000000000..4aa3c4caf43b73694b7664c641646de0e1bc7ce2
GIT binary patch
literal 32768
zc%1Fp+i%lW90zcl0B$n6AYP)XsyM4Qkst;s3=PBsGl>}yxs=42T3#yGK3%N&5`65!
z9#N;Uzi5BKr2Q#-+{0ccZO4}+cJ2>sm8$P2Z4&$Z&c!~zoWxCgubQS$$%*UPnok}G
z*9B1&z9B>q_)|gH5GHQ$-^;0OQCRJ|aQBM5$)8A9{}eWV+kAcPkHSCs&o_SMn*aa+
z|Ch6RK`L!+i9hSUc5G3Lo>Gg&_ZzjYBC85f<!4QW#QO^60^y>KhCv!_wfwMJA$8@s
z+;6I+O4=QjwENBGok?6<vnlyb?$%z&-Awc@zs-rSQ>J_7&^KLY&1x(dQt#AcuE)o;
zph_I62cAbAU!|VCDl{6)b4q)@7wCTA(X}eHw0HaNFtD`D@b?zR?`w>;H17u%o=fFh
zrCYwAKA+j4FjDXI`DA2c?p6yGD=(FvY>V%Uren}|LoGZ=b`(E0jH4jETT14&-)_9>
zE4<&jazGYTA)WT9h?GZVm9v8lskFT<evqQ1Ndl6GE19%Ob|!f<Y9Tz>sX06`J?3Xp
z<w5EoZ}Hnys%Ue<vmvgo2gB?{EN?S#9Nyw&n!l=6;)1SgWjc!Y4hOD7+kt&dy>w>8
zh1AweOEwITGB#V)c8^VKy6&W5m-*UE<%ij^C!sul-nyPK+lZ$7<|)r!%@5`bz=_U_
zW@VGQP&uQLRNC1QKkP(P%lyCy=Wq0QH8Z)pqusm7{7xoORSwi8XWBLmgCGAIk>hz@
z5tj^wAJ2-waSl$$O`o=;%WUmvT32<EtTHt|cD8yznqixa@!6=4`<xk-Zc)wC9GxzS
zF?dnu<eBODgD4{2J8<WmyF%qnPAWa!65p4impRi1u4^5oR>$P^9~WGnw_+@;6RsI?
zAt|RyD}zf?=`ru}lXREy!+5=kH*-t+o2roRY*bYF>9H8Ssr}N5lQ`NR-(SikaJ(-`
z-cj{vak_U~?yH?fn}@d)zRh1_e2sP;>qmaaf9RLGYX!DL_PdRi+&v^OmBZWjrgJiC
zapC*loW$Yhih4EIShxzN8}8EYP3C(`R=9CaYX-GV{g5Zonj^7XU0e7LJTHgWSgU;g
z@giC?mxsk`<Lrw1mL9Y4(tKtui(iv7@u}QfwmN1SEL6g4^YBW)`1^T(Gy?zt00000
zfVpJx)BM(FLUFtJHGg)iC=|aahHeTixu>){q*r^<=`;xmH#>J;HhTS5Km2n5QI&3M
z?|yafQ6X$6y#D|DyblHd000000090Axm-R!zW)E~yhj5700000001A+wcO48`1}9S
z|NjF3000000KmnC>wf?M00000fQxVR|Nj60000000B~{P`+ooc00000fQ#>6bpWzE

